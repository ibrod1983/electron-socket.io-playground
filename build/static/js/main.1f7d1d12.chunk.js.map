{"version":3,"sources":["MessageSending/SendMessage.js","MessageSending/StringMessage.js","MessageSending/NumberMessage.js","MessageSending/ObjectMessage.js","Alert.js","global.js","Message.js","Messages.js","Event.js","RegisteredEvents.js","Loader.js","Header.js","AddEvent.js","App.js","serviceWorker.js","index.js"],"names":["styles","theme","formControl","margin","spacing","unit","minWidth","selectEmpty","marginTop","SendMessage","state","event","message","tab","error","onEventChange","e","target","value","_this","setState","onMessageChange","isObject","evalResult","eval","concat","onSubmit","preventDefault","parseInt","props","handleTabChange","classes","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","root","autoComplete","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_6___default","label","required","onChange","type","fullWidth","name","variant","_material_ui_core_FormControl__WEBPACK_IMPORTED_MODULE_11___default","_material_ui_core_InputLabel__WEBPACK_IMPORTED_MODULE_8___default","htmlFor","_material_ui_core_Select__WEBPACK_IMPORTED_MODULE_13___default","inputProps","id","_material_ui_core_MenuItem__WEBPACK_IMPORTED_MODULE_9___default","_material_ui_core_FormHelperText__WEBPACK_IMPORTED_MODULE_12___default","_StringMessage__WEBPACK_IMPORTED_MODULE_14__","_NumberMessage__WEBPACK_IMPORTED_MODULE_15__","_ObjectMessage__WEBPACK_IMPORTED_MODULE_16__","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_7___default","disabled","connected","color","React","Component","withStyles","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_1___default","StringMessage","multiline","rows","NumberMessage","ObjectMessage","variantIcon","success","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","MySnackbarContentWrapper","backgroundColor","palette","dark","primary","amber","icon","fontSize","iconVariant","opacity","marginRight","display","alignItems","onClose","other","Object","objectWithoutProperties","Icon","react_default","SnackbarContent_default","assign","classNames","aria-describedby","action","IconButton_default","key","aria-label","close","onClick","Close_default","handleAlertClose","reason","Snackbar_default","anchorOrigin","vertical","horizontal","open","autoHideDuration","nature","content","observable","alertOpen","alertNature","alertContent","window","handleAlertCloseAction","createAlertAction","Message","getType","Array","isArray","onDataCopy","str","el","document","JSON","stringify","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","_this2","owner","console","log","Card_default","CardContent_default","padding","Typography_default","float","gutterBottom","time","eventName","data","lib","objectSpread","chromeLight","TREENODE_FONT_SIZE","TREENODE_FONT_FAMILY","bottom","Tooltip_default","title","FileCopy_default","textAlign","Done_default","status","PureComponent","pending","scrollToBottom","messagesDiv","scrollTop","scrollHeight","querySelector","messagesList","prevProps","instanceId","messages","length","shouldScrollDown","lastMessage","childNodes","clientHeight","offsetHeight","listStyle","paddingLeft","map","index","width","marginBottom","src_Message","chip","Chip_default","Event_default","onDelete","RegisteredEvents","events","src_Event","onEventDelete","Loader","CircularProgress_default","size","Header","address","defineProperty","connectionStatus","onDisconnectSubmit","onConnectSubmit","renderButton","Button_default","renderStatus","src_Loader","Search_default","CastConnected_default","_this$props","AppBar_default","Toolbar_default","search","searchIcon","InputBase_default","inputRoot","input","inputInput","flexGrow","borderRadius","shape","fade","common","white","&:hover","marginLeft","breakpoints","up","height","pointerEvents","justifyContent","paddingTop","paddingRight","paddingBottom","transition","transitions","create","AddEvent","TextField_default","createMuiTheme","blue","green","grey","StyledTab","textTransform","minHeight","Tab","StyledClearIcon","top","right","ClearIcon","observer","_Component","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getActiveInstance","instances","filter","instance","activeInstance","addInstance","generateInstance","toConsumableArray","uuid","socket","registeredEvents","anonymousEvents","allEventsChecked","connect","_this$getInstanceSlic","getInstanceSlice","disconnect","io","originalOnevent","onevent","on","_this$getInstanceSlic2","attemptNumber","_this$getInstanceSlic3","store","_this$getInstanceSlic4","repeatEventRegistration","keys","_arr","_i","registerEvent","listenToAllEvents","_this$getInstanceSlic5","off","addMessageToState","messageId","_this$getInstanceSlic6","getTime","forEach","ins","getInstanceReference","that","assertThisInitialized","packet","eventData","registerAnonymousEvent","unregisterAnonymousEvents","_this$getInstanceSlic8","_this$getInstanceSlic9","hasOwnProperty","onMessagesDelete","_this$getInstanceSlic10","_this$getInstanceSlic11","onMessageSubmit","sendMessageToServer","changeMessage","callback","emit","prop","_this$getInstanceSlic13","onEventSubmit","_this$getInstanceSlic14","getSocketByInstanceId","handleAllEventsCheck","_this$getInstanceSlic15","checked","unix","getMoment","moment","format","changeActiveInstance","createNewTab","destroyInstance","stopPropagation","_this$getInstanceSlic16","newIndex","tabIndex","indexOf","newInstances","lastInstance","getTabAddress","slice","instance0","inherits","createClass","_this$getInstanceSlic17","activeInstanceId","firstInstance","core_styles","Tabs_default","indicatorColor","textColor","handleChange","Add_default","src_Header","FormControlLabel_default","control","Checkbox_default","AddEvent_AddEvent","values","DeleteSweep_default","Messages_default","clear","src_Alert","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f7d1d12.chunk.js","sourcesContent":["import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\nimport Select from '@material-ui/core/Select';\r\nimport StringMessage from './StringMessage';\r\nimport NumberMessage from './NumberMessage';\r\nimport ObjectMessage from './ObjectMessage';\r\n\r\n\r\nconst styles = theme => ({\r\n    // root: {\r\n    //     display: 'flex',\r\n    //     flexWrap: 'wrap',\r\n    // },\r\n    formControl: {\r\n        margin: theme.spacing.unit,\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing.unit * 2,\r\n    },\r\n});\r\n\r\n\r\nclass SendMessage extends React.Component {\r\n    state = {\r\n        // event: process.env.NODE_ENV ===  'development' ? \"yoyo\" : '',\r\n        event: \"\",\r\n        message: \"\",\r\n        tab: 'String',\r\n        error: false\r\n    }\r\n\r\n    onEventChange = (e) => {\r\n\r\n        const event = e.target.value;\r\n\r\n        this.setState({ event })\r\n    }\r\n\r\n    onMessageChange = (message) => {\r\n        let error = false;\r\n        if (this.state.tab === 'Object') {\r\n            const parsedMessage = this.isObject(message);\r\n            if (!parsedMessage) {\r\n                error = true;\r\n            }\r\n        }\r\n        this.setState({ message, error });\r\n    }\r\n\r\n    isObject = (value) => {//Returns the parsed object on success, false on failure.\r\n        // debugger;\r\n        let evalResult;\r\n        try {\r\n            eval(`evalResult = ${value}`) // if it doesn't throw it's a valid array or object\r\n            if (typeof evalResult === 'object') {\r\n                return evalResult;\r\n            } else {\r\n                return false;\r\n            }\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        // debugger;\r\n        e.preventDefault();\r\n        let value = this.state.message;\r\n        // this.validateInput(value)\r\n        switch (this.state.tab) {\r\n            case 'Number':\r\n                value = parseInt(value)\r\n                break;\r\n            case 'Object':\r\n                // debugger;\r\n                let evalResult;\r\n                eval(`evalResult = ${value}`);\r\n                value = evalResult;\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        // alert(this.state.address)\r\n        this.props.onSubmit(this.state.event, value);\r\n    }\r\n\r\n    handleTabChange = (e) => {\r\n        this.setState({ tab: e.target.value,message:\"\",error:false })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <form className={classes.root} onSubmit={this.onSubmit} autoComplete=\"off\">\r\n                <TextField\r\n                    // id=\"outlined-password-input\"\r\n                    label=\"Event name\"\r\n                    required\r\n                    // className={classes.textField}\r\n                    onChange={this.onEventChange} value={this.state.event}\r\n                    type=\"text\"\r\n                    fullWidth\r\n                    name=\"event\"\r\n\r\n                    // autoComplete=\"current-password\"\r\n                    margin=\"dense\"\r\n                    variant=\"outlined\"\r\n                />\r\n                <FormControl className={classes.formControl}>\r\n                    <InputLabel htmlFor=\"age-simple\">Format</InputLabel>\r\n                    <Select\r\n                        value={this.state.tab}\r\n                        onChange={this.handleTabChange}\r\n                        inputProps={{\r\n                            name: 'age',\r\n                            id: 'age-simple',\r\n                        }}\r\n                    >\r\n\r\n                        <MenuItem value={'String'}>String</MenuItem>\r\n                        <MenuItem value={'Number'}>Number</MenuItem>\r\n                        <MenuItem value={'Object'}>Object</MenuItem>\r\n\r\n                    </Select>\r\n                    <FormHelperText>Select message type</FormHelperText>\r\n                </FormControl>\r\n                {this.state.tab === 'String' && <StringMessage onChange={this.onMessageChange} value={this.state.message} />}\r\n\r\n                {this.state.tab === 'Number' && <NumberMessage onChange={this.onMessageChange} value={this.state.message} />}\r\n                {this.state.tab === 'Object' && <ObjectMessage error={this.state.error} onChange={this.onMessageChange} value={this.state.message} />}\r\n\r\n\r\n                <Button disabled={!this.props.connected || this.state.error} type=\"submit\" variant=\"contained\" color=\"primary\" >\r\n                    Send\r\n              </Button>\r\n            </form>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(SendMessage);\r\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nconst StringMessage = (props) => {\r\n    \r\n    return (\r\n        <TextField\r\n            // id=\"outlined-password-input\"\r\n            label=\"Message\"\r\n          \r\n            \r\n            multiline\r\n            rows={10}\r\n            // className={classes.textField}\r\n            onChange={(e)=>{props.onChange(e.target.value)}} value={props.value}\r\n            type=\"text\"\r\n            fullWidth\r\n            name=\"message\"\r\n\r\n            // autoComplete=\"current-password\"\r\n            margin=\"dense\"\r\n            variant=\"outlined\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default StringMessage;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nconst NumberMessage = (props) => {\r\n\r\n    \r\n\r\n    return (\r\n        <TextField\r\n            // id=\"outlined-password-input\"\r\n            label=\"Message\"\r\n            required\r\n            // className={classes.textField}\r\n            onChange={(e)=>{props.onChange(e.target.value)}} value={props.value}\r\n            type=\"number\"\r\n            fullWidth\r\n            name=\"message\"\r\n            // autoComplete=\"current-password\"\r\n            margin=\"dense\"\r\n            variant=\"outlined\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default NumberMessage;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n// import 'codemirror/lib/codemirror.css';\r\n// import 'codemirror/theme/material.css';\r\n// import 'codemirror/mode/javascript/javascript'\r\n// import { Controlled as CodeMirror } from 'react-codemirror2'\r\n\r\nconst ObjectMessage = (props) => {\r\n\r\n    // return (\r\n    //     <div>\r\n    //         <CodeMirror\r\n    //             value={props.value}\r\n    //             options={{ mode: { name: 'javascript', json: true } }}\r\n    //             onBeforeChange={(editor, data, value) => {\r\n    //                 props.onChange(value)\r\n    //             }}\r\n                \r\n    //         />\r\n    //     </div>\r\n    // )\r\n\r\n\r\n    return (\r\n        <TextField\r\n            // id=\"outlined-password-input\"\r\n            label=\"Object message\"\r\n            required\r\n            error={props.error}\r\n            multiline\r\n            rows={10}\r\n            // className={classes.textField}\r\n            onChange={(e)=>{props.onChange(e.target.value)}} value={props.value}\r\n            type=\"text\"\r\n            fullWidth\r\n            name=\"message\"\r\n\r\n            // autoComplete=\"current-password\"\r\n            margin=\"dense\"\r\n            variant=\"outlined\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default ObjectMessage;","import React from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport classNames from 'classnames';\r\n// import Button from '@material-ui/core/Button';\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport green from '@material-ui/core/colors/green';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\n\r\nconst variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n};\r\n\r\nconst styles1 = theme => ({\r\n    success: {\r\n        backgroundColor: theme.palette.success,\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.dark,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing.unit,\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n});\r\n\r\nconst styles2 = theme => ({\r\n    margin: {\r\n        margin: theme.spacing.unit,\r\n    },\r\n});\r\n\r\nfunction MySnackbarContent(props) {\r\n    const { classes, className, message, onClose, variant, ...other } = props;\r\n    const Icon = variantIcon[variant];\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={classNames(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={classNames(classes.icon, classes.iconVariant)} />\r\n                    {message}\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton\r\n                    key=\"close\"\r\n                    aria-label=\"Close\"\r\n                    color=\"inherit\"\r\n                    className={classes.close}\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n            {...other}\r\n        />\r\n    );\r\n}\r\n\r\nconst MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);\r\n\r\n\r\n\r\nconst Alert = (props) => {\r\n\r\n    // const { classes } = this.props;\r\n    // console.log('alert rendering');\r\n\r\n    const handleAlertClose = (event,reason) => {\r\n        props.handleAlertClose(event,reason);\r\n    }\r\n\r\n    return (\r\n        <Snackbar\r\n            anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'left',\r\n            }}\r\n            open={props.open}\r\n            autoHideDuration={4000}\r\n            onClose={handleAlertClose}\r\n        >\r\n            <MySnackbarContentWrapper\r\n                onClose={handleAlertClose}\r\n                variant={props.nature || 'info'}\r\n                message={<span id=\"message-id\">{props.content}</span>}\r\n            />\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n\r\nexport default withStyles(styles2)(Alert);\r\n","import {observable} from 'mobx';\r\n\r\n\r\n\r\nconst schema = {\r\n    alertOpen: false,\r\n    alertNature:'error',\r\n    alertContent: '',        \r\n}\r\n\r\nconst state = observable(schema);\r\n\r\nexport default window.state = state;\r\n\r\n\r\n\r\nexport const handleAlertCloseAction = (event, reason) => {\r\n  \r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    state.alertOpen=false;\r\n  }; \r\n\r\nexport const createAlertAction = (nature,message)=>{\r\n  Object.assign(state,{\r\n    alertOpen:true,\r\n    alertNature:nature,\r\n    alertContent:message\r\n  })\r\n}  \r\n\r\n\r\n","import React from 'react';\r\n\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CopyIcon from '@material-ui/icons/FileCopy';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\n\r\nimport { ObjectInspector } from 'react-inspector'\r\nimport { chromeLight } from 'react-inspector'\r\nimport { createAlertAction } from './global';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n    success: {\r\n        color: theme.palette.success,\r\n    },\r\n    pending:{\r\n        color:theme.palette.pending\r\n    }\r\n});\r\n\r\n\r\nclass Message extends React.PureComponent {\r\n\r\n    getType = (message) => {\r\n        // debugger;\r\n        switch (typeof message) {\r\n            case 'string':\r\n                return 'String'\r\n            case 'object':\r\n                if (Array.isArray(message)) {\r\n                    return 'Array';\r\n                } else {\r\n                    return 'Object';\r\n                }\r\n            case 'number':\r\n                return 'Number';\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onDataCopy = (str) => {\r\n        const el = document.createElement('textarea');  // Create a <textarea> element\r\n        if (typeof str === 'object') {\r\n            try {\r\n                str = JSON.stringify(str);\r\n            } catch (error) {\r\n\r\n                return createAlertAction('error', 'Unable to copy');\r\n            }\r\n\r\n        }\r\n        el.value = str;                                 // Set its value to the string that you want copied\r\n        el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n        el.style.position = 'absolute';\r\n        el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n        document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n        const selected =\r\n            document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n                ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n                : false;                                    // Mark as false to know no selection existed before\r\n        el.select();                                    // Select the <textarea> content\r\n        document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n        document.body.removeChild(el);                  // Remove the <textarea> element\r\n        if (selected) {                                 // If a selection existed before copying\r\n            document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n            document.getSelection().addRange(selected);   // Restore the original selection\r\n        }\r\n\r\n        createAlertAction('success', 'Copied to clipboard!');\r\n\r\n    }\r\n\r\n    // handleHover = () => {\r\n    //     this.setState({ CopyButtonShown: !this.state.CopyButtonShown })\r\n    // }\r\n\r\n\r\n    render() {\r\n        const owner = this.props.owner;\r\n        console.log('item rendering!', this.props)\r\n        return (\r\n\r\n\r\n\r\n            <Card >\r\n                <CardContent style={{ padding: '15px' }}>\r\n                    <Typography style={{ float: 'right' }} color=\"textSecondary\" gutterBottom>\r\n                        {this.props.time}\r\n                    </Typography>\r\n                    \r\n                    <Typography color=\"primary\" gutterBottom>\r\n                        {owner ? 'Sent' : 'Received'} event: {this.props.eventName}\r\n                    </Typography>\r\n                   \r\n                    <Typography color=\"textSecondary\" gutterBottom>\r\n                        Type: {this.getType(this.props.data)}\r\n                    </Typography>\r\n                    <ObjectInspector theme={{ ...chromeLight, ...({ TREENODE_FONT_SIZE: '18px', TREENODE_FONT_FAMILY: 'roboto,helvetica,arial' }) }} data={this.props.data} />\r\n\r\n                    <div style={{ float: 'right', position: 'relative', left: '6px', bottom: '49px' }} >\r\n                        <Tooltip title=\"Copy to clipboard\">\r\n                            <IconButton onClick={() => { this.onDataCopy(this.props.data) }} ><CopyIcon fontSize=\"small\"></CopyIcon></IconButton>\r\n                        </Tooltip>\r\n                        {owner && (\r\n\r\n                          <div style={{textAlign:'center'}}>  <DoneIcon style={{color:this.props.status  === 'success' ?'green' : 'grey'}}></DoneIcon></div>\r\n    \r\n                        )}\r\n\r\n                    </div>\r\n                </CardContent>\r\n\r\n\r\n\r\n            </Card>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default withStyles(styles)(Message);\r\n\r\n\r\n// export default Message;\r\n\r\n","import React from 'react';\r\nimport Message from './Message';\r\n\r\n\r\n\r\nexport default class extends React.Component {\r\n\r\n\r\n    componentDidMount() {\r\n        this.messagesDiv = document.querySelector('#messages');//The scrolled container\r\n\r\n        this.messagesList = document.querySelector('#messages_list');//The actual UL. The ID is set in the messages component.\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        // debugger;\r\n\r\n        console.log('prev props', prevProps)\r\n        console.log('current props', this.props)\r\n\r\n        if(this.props.instanceId !== prevProps.instanceId)\r\n            return this.scrollToBottom();\r\n\r\n        if (this.props.messages.length > 0 && prevProps.messages.length !== this.props.messages.length) {\r\n            if (this.shouldScrollDown(this.props.messages[this.props.messages.length - 1])) {\r\n                this.scrollToBottom();\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    shouldScrollDown(lastMessage) {\r\n\r\n        if (lastMessage.owner) {\r\n            return true;\r\n        } else if (this.messagesList.childNodes.length > 1) {//Check if there is more than one item first.\r\n\r\n            const scrollHeight = this.messagesDiv.scrollHeight;\r\n\r\n            const clientHeight = this.messagesDiv.clientHeight;\r\n\r\n            const scrollTop = this.messagesDiv.scrollTop;\r\n\r\n            const lastItemHeight = this.messagesList.childNodes[this.messagesList.childNodes.length - 1].offsetHeight\r\n\r\n            const oneBeforeLastItemHeight = this.messagesList.childNodes[this.messagesList.childNodes.length - 2].offsetHeight\r\n\r\n            if (clientHeight + scrollTop + lastItemHeight + oneBeforeLastItemHeight >= scrollHeight) {\r\n                return true\r\n\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    scrollToBottom = () => {\r\n\r\n        this.messagesDiv.scrollTop = this.messagesDiv.scrollHeight;\r\n\r\n    }\r\n\r\n    // console.log(window.copy)\r\n    render() {\r\n        return (\r\n\r\n\r\n\r\n\r\n            <ul id=\"messages_list\" style={{ listStyle: 'none', paddingLeft: '0' }}>\r\n\r\n\r\n\r\n\r\n                {this.props.messages.map((message, index) => <li key={message.id} style={{ display: 'block', width: '100%', float: 'left', marginBottom: '15px', marginTop: '15px' }}><div\r\n                    style={{\r\n                        // display: 'inline-block',\r\n                        float: message.owner ? 'left' : 'right',\r\n                        width: '40%'\r\n\r\n                    }}>\r\n                    <Message  {...message} >\r\n                    </Message>\r\n                </div>\r\n                </li>)}\r\n\r\n            </ul>\r\n\r\n\r\n\r\n        )\r\n    }\r\n\r\n\r\n}","import React from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport EventIcon from '@material-ui/icons/Event';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst styles = theme => ({\r\n   \r\n    chip: {\r\n    //   fontSize:'10px'\r\n    },\r\n  });\r\n\r\nconst Event = (props) => {\r\n    const { classes } = props;\r\n    // console.log('event rendering!')\r\n    return (\r\n        <Chip\r\n            label={props.name}\r\n          \r\n            className={classes.chip}\r\n            color=\"primary\"\r\n            icon={<EventIcon/>}\r\n            onDelete={props.onDelete}\r\n            variant=\"outlined\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default withStyles(styles)(Event);\r\n","import React from 'react';\r\nimport Event from './Event';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n\r\nconst styles={\r\n    marginBottom:'10px',\r\n    marginTop:'10px'\r\n}\r\n\r\nexport default (props) => {\r\n    console.log('events from props',props.events)\r\n    return(\r\n        <div >\r\n        <Typography variant=\"subtitle1\" gutterBottom>\r\n        Listening to events:\r\n      </Typography>\r\n            {props.events.map(event=><div style={styles}><Event onDelete={()=>{props.onEventDelete(event.name)}} name={event.name}></Event></div>)}\r\n        </div>\r\n     \r\n    )\r\n\r\n}","import React from 'react';\r\n// import { withStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\n\r\nfunction Loader(props) {\r\n//   const { classes } = props;\r\n  return (\r\n    <div>\r\n     \r\n      <CircularProgress size={21}  color=\"inherit\" />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Loader;","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CastConnectedIcon from '@material-ui/icons/CastConnected';\r\nimport { fade } from '@material-ui/core/styles/colorManipulator';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Loader from './Loader'\r\n\r\n\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\n\r\nconst styles = theme => (\r\n    {\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n\r\n        search: {\r\n            position: 'relative',\r\n            borderRadius: theme.shape.borderRadius,\r\n            backgroundColor: fade(theme.palette.common.white, 0.15),\r\n            '&:hover': {\r\n                backgroundColor: fade(theme.palette.common.white, 0.25),\r\n            },\r\n            marginRight: theme.spacing.unit * 2,\r\n            marginLeft: 0,\r\n            width: '100%',\r\n            [theme.breakpoints.up('sm')]: {\r\n                marginLeft: theme.spacing.unit * 3,\r\n                width: 'auto',\r\n            },\r\n        },\r\n        searchIcon: {\r\n            width: theme.spacing.unit * 9,\r\n            height: '100%',\r\n            position: 'absolute',\r\n            pointerEvents: 'none',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n        },\r\n        inputRoot: {\r\n            color: 'inherit',\r\n            width: '100%',\r\n        },\r\n        inputInput: {\r\n\r\n\r\n            paddingTop: theme.spacing.unit,\r\n            paddingRight: theme.spacing.unit,\r\n            paddingBottom: theme.spacing.unit,\r\n            paddingLeft: theme.spacing.unit * 10,\r\n            transition: theme.transitions.create('width'),\r\n            width: '100%',\r\n            [theme.breakpoints.up('md')]: {\r\n                width: 200,\r\n            },\r\n        },\r\n    }\r\n);\r\n\r\nclass Header extends React.Component {\r\n\r\n    state = {\r\n        address: \"localhost:3001\"\r\n    }\r\n\r\n    onChange = (e) => {\r\n        const name = e.target.name;\r\n        const value = e.target.value;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        switch (this.props.connectionStatus) {\r\n            case 'connected':\r\n            case 'reconnecting':\r\n            case 'connecting':\r\n                this.onDisconnectSubmit();\r\n\r\n                break;\r\n            case 'disconnected':\r\n                this.onConnectSubmit();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onConnectSubmit = (e) => {\r\n        // e.preventDefault();\r\n        // alert(this.state.address)\r\n        this.props.onConnectSubmit(this.state.address);\r\n    }\r\n\r\n    onDisconnectSubmit = (e) => {\r\n        // e.preventDefault();\r\n        // alert(this.state.address)\r\n        this.props.onDisconnectSubmit();\r\n    }\r\n\r\n    renderButton = () => {\r\n        switch (this.props.connectionStatus) {\r\n            case 'connected':\r\n                return <Button type=\"submit\" color=\"inherit\">Disconnect</Button>;\r\n            case 'reconnecting':\r\n            case 'connecting':\r\n                return <Button type=\"submit\" color=\"inherit\">Cancel</Button>;\r\n            case 'disconnected':\r\n                return <Button type=\"submit\" color=\"inherit\">Connect</Button>;\r\n            // case 'connecting':\r\n            //     return <Typography color=\"inherit\" variant=\"subtitle1\" >Connecting...</Typography>;\r\n            // default:\r\n\r\n        }\r\n\r\n    }\r\n\r\n    renderStatus = () => {\r\n        switch (this.props.connectionStatus) {\r\n\r\n            case 'reconnecting':\r\n            case 'connecting':\r\n                return <Loader></Loader>;\r\n            case 'disconnected':\r\n                return <SearchIcon></SearchIcon>;\r\n            case 'connected':\r\n               return <CastConnectedIcon></CastConnectedIcon>;\r\n            default:\r\n                return '';\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { classes,connectionStatus } = this.props;\r\n        let address;\r\n        let disabled;\r\n        if(connectionStatus === 'connected' || connectionStatus === 'connecting' || connectionStatus === 'reconnecting'){\r\n            address= this.props.address;\r\n            disabled = true;\r\n        }else{\r\n            address= this.state.address;\r\n            disabled= false;\r\n        }\r\n        return (\r\n            <form autoComplete=\"off\" onSubmit={this.onSubmit} className={classes.root}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n\r\n                        <div className={classes.search}>\r\n                            <div className={classes.searchIcon}>\r\n                                {this.renderStatus()}\r\n\r\n                            </div>\r\n                            <InputBase\r\n                                disabled={disabled}    \r\n                                name=\"address\"\r\n                                value={address}\r\n                                onChange={this.onChange}\r\n                                // placeholder=\"localhost:3001\"\r\n                                classes={{\r\n                                    root: classes.inputRoot,\r\n                                    input: classes.inputInput,\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        {this.renderButton()}\r\n\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </form>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default withStyles(styles)(Header);","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport default class AddEvent extends React.Component {\r\n    state = {\r\n        event: \"\"\r\n    }\r\n\r\n    onChange = (e) => {\r\n        const name = e.target.name;\r\n        const value = e.target.value;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        // alert(this.state.address)\r\n        this.props.onSubmit(this.state.event);\r\n    }\r\n\r\n    // render() {\r\n    //     return (\r\n    //         <form onSubmit={this.onSubmit} className=\"form-inline\">\r\n\r\n    //             <div className=\"form-group mx-sm-3 mb-2\">\r\n\r\n    //                 <input onChange={this.onChange} value={this.state.event} type=\"text\" className=\"form-control\" id=\"event\" name=\"event\" placeholder=\"Event name\" />\r\n    //             </div>\r\n    //             <button type=\"submit\" className=\"btn btn-primary mb-2\">Register event</button>\r\n    //         </form>\r\n\r\n    //     )\r\n    // }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} >\r\n                    \r\n                <TextField                  \r\n                    label=\"Event name\"\r\n                    required               \r\n                    onChange={this.onChange} value={this.state.event} \r\n                    type=\"text\"\r\n                    fullWidth\r\n                    name=\"event\"                \r\n                    margin=\"dense\"\r\n                    variant=\"outlined\"\r\n                />\r\n                <Button disabled={!this.props.connected} type=\"submit\" variant=\"contained\" color=\"primary\" >\r\n                    Register\r\n                </Button>\r\n            </form>\r\n\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n// import Grid from '@material-ui/core/Grid';\r\nimport Alert from './Alert';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport DeleteSweepIcon from '@material-ui/icons/DeleteSweep';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { observer } from 'mobx-react';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n// import Fab from '@material-ui/core/Fab';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n// import { runInAction } from 'mobx';\r\nimport Messages from './Messages';\r\nimport RegisteredEvents from './RegisteredEvents';\r\nimport uuid from 'uuid';\r\nimport './App.scss';\r\n// import Instance from './Instance';\r\nimport moment from 'moment';\r\nimport Header from './Header';\r\nimport AddEvent from './AddEvent'\r\nimport SendMessage from './MessageSending/SendMessage'\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport { blue, green, grey } from '@material-ui/core/colors';\r\nimport io from 'socket.io-client';\r\nimport store from './global';\r\nimport { handleAlertCloseAction, createAlertAction } from './global'\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: blue,\r\n    success: green[600],\r\n    pending: grey\r\n  },\r\n});\r\n\r\nconst StyledTab = withStyles({\r\n  root: {\r\n    textTransform: 'initial',\r\n    minHeight: '50px'\r\n  },\r\n})(Tab);\r\n\r\nconst StyledClearIcon = withStyles({\r\n  root: {\r\n    // position:'absolute'\r\n    // marginLeft: '90%',\r\n    // marginBottom: '-20px',\r\n    fontSize: '20px',\r\n    position:'absolute',\r\n    top:'20px',\r\n    right:'0px'\r\n  },\r\n\r\n})(ClearIcon);\r\n\r\n\r\n\r\nexport default observer(\r\n  class App extends Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      // this.messages = React.createRef();\r\n      const instance0 = this.generateInstance();\r\n      // const instance1 = this.generateInstance();\r\n      this.state = {\r\n        instances: [instance0],\r\n        activeInstance: instance0.id\r\n      }\r\n    }\r\n\r\n\r\n    getActiveInstance = () => {\r\n      // debugger;\r\n      console.log(this.state)\r\n      return this.state.instances.filter(instance => instance.id === this.state.activeInstance)[0]\r\n    }\r\n\r\n    addInstance = () => {\r\n      const instance = this.generateInstance();\r\n      this.setState((state) => {\r\n        return {\r\n          instances: [...state.instances, instance],\r\n          activeInstance: instance.id\r\n        }\r\n      })\r\n    }\r\n\r\n\r\n    generateInstance = () => {\r\n      const instance = {\r\n        address: \"\",\r\n        id: uuid(),\r\n        socket: null,\r\n        messages: [],\r\n        registeredEvents: {},\r\n        anonymousEvents: {},\r\n        allEventsChecked: false,\r\n        connectionStatus: \"disconnected\"\r\n      }\r\n\r\n      return instance;\r\n    }\r\n\r\n\r\n\r\n    connect = (address) => {\r\n      console.log('connecting');\r\n\r\n      // const currentState = \r\n\r\n      const instanceId = this.state.activeInstance;//The connect function is relevant to the currently active instance(tab).\r\n\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      instance.connectionStatus = 'connecting';\r\n\r\n      this.setState(() => ({ instances }));\r\n\r\n      if (instance.socket) {\r\n        instance.socket.disconnect();\r\n      }\r\n\r\n      const socket = instance.socket = io(address);\r\n\r\n      instance.originalOnevent = socket.onevent;//Create a reference to the original onevent function of SocketIO, to be used by the \"listen to all events\" mechanism.\r\n\r\n      socket.on('connect', () => {\r\n\r\n        const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n        console.log('connected!')\r\n\r\n        instance.connectionStatus = 'connected';\r\n        instance.address = address;\r\n\r\n        this.setState(() => ({ instances }));\r\n\r\n      });\r\n\r\n\r\n      socket.on('disconnect', (reason) => {\r\n        console.log('reason', reason)\r\n        if (reason === 'io server disconnect') {\r\n          socket.disconnect();\r\n        }\r\n        // else the socket will automatically try to reconnect\r\n      });\r\n\r\n\r\n      socket.on('connect_error', (error) => {\r\n        // console.log('Error connecting!', state)\r\n\r\n        createAlertAction('error', 'Error connecting to the server');\r\n\r\n      });\r\n\r\n\r\n      socket.on('reconnect', (attemptNumber) => {\r\n\r\n        const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n        instance.connectionStatus = \"connected\";\r\n        console.log('reconnected');\r\n\r\n        store.alertOpen = false;\r\n\r\n        this.setState(() => ({ instances }));\r\n\r\n      });\r\n\r\n\r\n      socket.on('reconnecting', (attemptNumber) => {\r\n        console.log('reconnecting');\r\n\r\n        const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n        instance.connectionStatus = \"reconnecting\";\r\n\r\n        this.setState(() => ({ instances }));\r\n\r\n      });\r\n\r\n      this.repeatEventRegistration(instance);//In case the user manually disconnected and reconnected, the events need to be re-registered.\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    repeatEventRegistration = (instance) => {\r\n      if (Object.keys(instance.registeredEvents).length > 0) {//PROBLEM!!!!!!!! fix it\r\n        console.log('re-registering events');\r\n        for (let event of Object.keys(instance.registeredEvents)) {\r\n          this.registerEvent(instance.id, event);\r\n        }\r\n      }\r\n\r\n      if (instance.allEventsChecked) {\r\n        this.listenToAllEvents(instance.id, true)\r\n      }\r\n    }\r\n\r\n\r\n    registerEvent = (instanceId, eventName) => {\r\n\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      const socket = instance.socket;//The socket associated with this instance.\r\n\r\n      if (socket) {\r\n\r\n        socket.off(eventName);//Remove any existing listener for that event on this socket, to prevent duplication.\r\n\r\n        socket.on(eventName, (data) => {//Register the event with the given socket.\r\n\r\n          this.addMessageToState(instanceId, eventName, data, false)\r\n\r\n        })\r\n      }\r\n\r\n      instance.registeredEvents[eventName] = { name: eventName };//\"instance\" is not to be confused with the one from the callback scope.\r\n\r\n      this.setState(() => ({ instances }));\r\n\r\n    }\r\n\r\n\r\n    addMessageToState = (instanceId, eventName, data, owner) => {\r\n\r\n      const messageId = uuid();\r\n\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      const time = this.getTime();\r\n      //*****UNDESRSTAND WHY THIS WASNT WORKING!!! */\r\n      // instance.messages.push({ id: messageId, eventName, time, data, owner, status: 'pending' })//Adding a message to the instance.\r\n      instance.messages =  [...instance.messages, { id: messageId, eventName, time, data, owner, status: 'pending'} ]\r\n\r\n      this.setState(() => ({ instances }));\r\n\r\n      return messageId;\r\n\r\n    }\r\n\r\n\r\n    getInstanceSlice = (id) => {//This function returns COPIES of both the entire instances array, and the specific instance object,\r\n      //to be used in setState by the calling function.\r\n\r\n      const instances = [...this.state.instances];//Copy the instances.\r\n\r\n      let instance;\r\n      instances.forEach((ins, index) => {\r\n        if (ins.id === id) {\r\n          instance = instances[index];//The actual instance\r\n        }\r\n      })\r\n      return { instance, instances };//Return an object containing both.\r\n    }\r\n\r\n    getInstanceReference = (id)=>{\r\n      \r\n\r\n      let instance;\r\n      this.state.instances.forEach((ins, index) => {\r\n        if (ins.id === id) {\r\n          instance = this.state.instances[index];//The actual instance\r\n        }\r\n      })\r\n      return { instance, instances:this.state.instances };//Return an object containing both.\r\n    }\r\n    \r\n\r\n\r\n    listenToAllEvents = (instanceId, on) => {\r\n\r\n      const { instance } = this.getInstanceSlice(instanceId);\r\n\r\n      const socket = instance.socket;\r\n\r\n      const that = this;\r\n\r\n      if (on) {\r\n\r\n        socket.onevent = function (packet) {//This intercepts the original onevent function, which gets fired on every incoming event.\r\n          const eventName = packet.data[0];//Extracts the event name.\r\n\r\n          const eventData = packet.data[1];//Extracts the data.\r\n\r\n          that.registerAnonymousEvent(instanceId, eventName, eventData)//Registers the event\r\n\r\n          instance.originalOnevent.call(this, packet);//Calls the original onevent function, for normal application flow. The reference was created after\r\n          //socket initialization.\r\n\r\n        };\r\n\r\n      } else {\r\n        // debugger;\r\n        socket.onevent = instance.originalOnevent;\r\n\r\n        that.unregisterAnonymousEvents(instanceId)\r\n\r\n      }\r\n\r\n    }\r\n\r\n\r\n\r\n    registerAnonymousEvent = (instanceId, eventName) => {//This registers a callback for an event coming from SocketIO's Socket.prototype.onevent function.\r\n      console.log('registering anonymous event:', eventName)\r\n\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      instance.anonymousEvents[eventName] = { name: eventName };\r\n\r\n      const socket = instance.socket;\r\n\r\n      if (socket) {\r\n        socket.off(eventName);\r\n        socket.on(eventName, (data) => {\r\n          console.log('on:', eventName)\r\n          this.addMessageToState(instanceId, eventName, data, false)\r\n        })\r\n      }\r\n\r\n      this.setState(() => ({ instances }));\r\n\r\n    }\r\n\r\n\r\n    unregisterAnonymousEvents = (instanceId) => {//Clear all anonymous events for the given instance.\r\n      // debugger;\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      const socket = instance.socket;\r\n\r\n      for (let event in instance.anonymousEvents) {\r\n        if (!instance.registeredEvents.hasOwnProperty(event)) {\r\n          socket.off(event)\r\n        }\r\n\r\n      }\r\n      instance.anonymousEvents = {}\r\n\r\n      this.setState(() => ({ instances }));\r\n    }\r\n\r\n\r\n\r\n    onMessagesDelete = () => {\r\n\r\n      const instanceId = this.state.activeInstance;\r\n\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      instance.messages = [];\r\n\r\n      this.setState(() => ({ instances }));\r\n\r\n    }\r\n\r\n\r\n\r\n    onConnectSubmit = (address) => {\r\n      this.connect(address);\r\n    }\r\n\r\n\r\n    onDisconnectSubmit = () => {\r\n\r\n      const instanceId = this.state.activeInstance;\r\n\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      const socket = instance.socket;\r\n\r\n      console.log('disconnected manually')\r\n\r\n      socket.disconnect();\r\n\r\n      instance.connectionStatus = 'disconnected';\r\n\r\n      this.setState(() => ({ instances }));\r\n\r\n    }\r\n\r\n\r\n    onMessageSubmit = (eventName, data) => {\r\n      const instanceId = this.state.activeInstance;\r\n\r\n      const { instance } = this.getInstanceSlice(instanceId);\r\n\r\n      const socket = instance.socket;\r\n\r\n      const messageId = this.addMessageToState(instanceId, eventName, data, true);\r\n\r\n      const callback = (data) => {\r\n        // debugger;\r\n        console.log('data from callback', data)\r\n        this.changeMessage(instanceId, messageId, 'status', 'success');\r\n      }\r\n\r\n      this.sendMessageToServer(socket, eventName, data, callback);\r\n    }\r\n\r\n\r\n    sendMessageToServer = (socket, eventName, message, callback) => {\r\n\r\n      socket.emit(eventName, message, callback)\r\n    }\r\n\r\n\r\n\r\n\r\n    changeMessage = (instanceId, messageId, prop, value) => {\r\n\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      this.setState(() => {\r\n        const messages = instance.messages.map((message) => {\r\n          if (message.id === messageId) {\r\n            return {\r\n              ...message,\r\n              [prop]: value\r\n            }\r\n          } else {\r\n            return message;\r\n          }\r\n        })\r\n        instance.messages = messages;\r\n        return {\r\n          instances\r\n        }\r\n      })\r\n    }\r\n\r\n\r\n    onEventSubmit = (instance, eventName) => {\r\n      console.log(instance, eventName)\r\n      this.registerEvent(instance, eventName);\r\n    }\r\n\r\n\r\n\r\n    onEventDelete = (name) => {\r\n\r\n      const instanceId = this.state.activeInstance;\r\n\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      const socket = instance.socket;\r\n\r\n      socket.off(name);\r\n\r\n      const oldEvents = instance.registeredEvents\r\n\r\n      delete oldEvents[name];\r\n\r\n      this.setState({\r\n        instances\r\n      })\r\n    }\r\n\r\n\r\n    getSocketByInstanceId = (instanceId) => {\r\n      const instance = this.state.instances.filter(instance => instance.id === instanceId)[0];\r\n      return instance.socket;\r\n    }\r\n\r\n\r\n\r\n    handleAllEventsCheck = name => event => {\r\n\r\n      const { instances, instance } = this.getInstanceSlice(this.state.activeInstance);\r\n\r\n      const checked = event.target.checked;\r\n\r\n      instance.allEventsChecked = checked;\r\n\r\n      this.setState(() => ({ instances }));\r\n\r\n      this.listenToAllEvents(instance.id, checked);\r\n    };\r\n\r\n\r\n    getTime = () => {\r\n\r\n      const unix = this.getMoment();\r\n      return moment(unix * 1000).format('HH:mm');\r\n    }\r\n\r\n\r\n    getMoment = () => {\r\n\r\n      return moment().unix();\r\n\r\n    }\r\n\r\n\r\n\r\n    handleAlertClose = (event, reason) => {\r\n      handleAlertCloseAction(event, reason);\r\n    };\r\n\r\n    changeActiveInstance = (id) => {\r\n      this.setState(() => ({ activeInstance: id }))\r\n\r\n    }\r\n\r\n    createNewTab = () => {\r\n      const instance = this.generateInstance();\r\n      this.setState((state) => ({\r\n        instances: [...state.instances, instance]\r\n      }))\r\n\r\n      this.changeActiveInstance(instance.id);\r\n\r\n    }\r\n\r\n\r\n\r\n    destroyInstance = (e, id) => {      \r\n\r\n      e.stopPropagation();\r\n      // debugger;\r\n      console.log('destroy instance!')\r\n\r\n      const { instances, instance } = this.getInstanceSlice(id);\r\n      console.log(instance.socket);\r\n\r\n      if(instance.socket){\r\n        instance.socket.disconnect();\r\n      }\r\n\r\n      \r\n\r\n      const tabIndex = instances.indexOf(instance);\r\n\r\n      const tabLength = instances.length;\r\n\r\n      let newIndex;\r\n\r\n      if (tabLength - tabIndex === 1) {\r\n        newIndex = tabIndex - 1\r\n      }else{\r\n        newIndex = tabIndex\r\n      }\r\n\r\n      const newInstances = instances.filter(instance => instance.id !== id);\r\n\r\n      const lastInstance = newInstances[newIndex];\r\n\r\n      this.setState({\r\n        activeInstance: lastInstance.id,\r\n        instances: newInstances,\r\n\r\n      });\r\n     \r\n    }\r\n\r\n\r\n\r\n    getTabAddress = (instance) => {\r\n      const address = instance.address;\r\n      const connectionStatus = instance.connectionStatus;\r\n      \r\n      // debugger;\r\n      if (connectionStatus === 'connected') {\r\n\r\n        if (address.length > 14) {\r\n          return address.slice(0, 14) + '...';\r\n        } else {\r\n          return address;\r\n        }\r\n\r\n      }\r\n\r\n      else if (connectionStatus === 'disconnected') {\r\n        return 'New connection'\r\n      }\r\n      else {\r\n        return connectionStatus + '...'\r\n      }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n      const { instance, instances } = this.getInstanceSlice(this.state.activeInstance)\r\n\r\n      const { connectionStatus, allEventsChecked, registeredEvents, messages, address } = instance;\r\n      \r\n      console.log('length from app render',messages.length)\r\n      const activeInstanceId = instance.id;\r\n\r\n      const tabIndex = instances.indexOf(instance);\r\n\r\n      const firstInstance =  instances[0]\r\n\r\n      console.log('tab index',tabIndex)\r\n\r\n      return (\r\n\r\n        <MuiThemeProvider theme={theme}>\r\n          <div id=\"wrapper\">\r\n            <AppBar color=\"default\" position=\"static\">\r\n              <Tabs indicatorColor=\"primary\" textColor=\"primary\" value={tabIndex} onChange={this.handleChange}>\r\n                {instances.map(instance =>\r\n                    \r\n                  <StyledTab\r\n\r\n                    // style={{ textTransform: 'initial' }}\r\n                    onClick={() => { this.changeActiveInstance(instance.id) }}\r\n                    label={this.getTabAddress(instance)}\r\n                    icon={instance.id !== firstInstance.id ? <StyledClearIcon onClick={(e) => { this.destroyInstance(e, instance.id) }}></StyledClearIcon> :null}\r\n                  >\r\n\r\n                  </StyledTab>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                )}\r\n\r\n                <IconButton onClick={this.createNewTab} aria-label=\"New tab\">\r\n                  <AddIcon />\r\n                </IconButton>\r\n\r\n              </Tabs>\r\n            </AppBar>\r\n\r\n            <Header address={address} connectionStatus={connectionStatus} onDisconnectSubmit={this.onDisconnectSubmit} onConnectSubmit={this.onConnectSubmit}></Header>\r\n\r\n\r\n\r\n\r\n\r\n            <div id=\"main\">\r\n              <div className=\"special_scroll\" id=\"panel\">\r\n\r\n                <div id=\"send_messages\">\r\n                  <Typography gutterBottom variant=\"h6\">Send messages</Typography>\r\n                  <SendMessage connected={connectionStatus === 'connected'} onSubmit={this.onMessageSubmit}></SendMessage>\r\n\r\n                </div>\r\n\r\n                <div id=\"events\">\r\n                  <Typography gutterBottom variant=\"h6\">Register events</Typography>\r\n\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        disabled={connectionStatus !== 'connected'}\r\n                        checked={allEventsChecked}\r\n                        onChange={this.handleAllEventsCheck('allEventsChecked')}\r\n                        value=\"allEventsChecked\"\r\n                        color=\"primary\"\r\n                      />\r\n                    }\r\n\r\n                    label=\"Listen to all incoming events\"\r\n                  />\r\n\r\n                  <AddEvent connected={connectionStatus === 'connected'} onSubmit={(eventName) => { this.onEventSubmit(activeInstanceId, eventName) }}></AddEvent>\r\n                  {Object.keys(registeredEvents).length > 0 && (\r\n\r\n                    <div id=\"registered_events\" >\r\n                      <RegisteredEvents onEventDelete={this.onEventDelete} events={Object.values(registeredEvents)}></RegisteredEvents>\r\n                    </div>\r\n\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"special_scroll\" id=\"messages\">\r\n\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Messages sent/received\r\n       {messages.length > 0 && (\r\n                    <div style={{ float: 'right' }}>\r\n\r\n                      <Tooltip title=\"Delete all messages\">\r\n                        <IconButton onClick={this.onMessagesDelete} aria-label=\"Delete\">\r\n                          <DeleteSweepIcon fontSize=\"small\" color=\"secondary\"></DeleteSweepIcon>\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                    </div>\r\n                  )}\r\n\r\n                </Typography>\r\n\r\n                <Messages instanceId={activeInstanceId} messages={messages} />\r\n                <div style={{ float: \"left\", clear: \"both\" }} id=\"dummy\">\r\n\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n          <Alert nature={store.alertNature} handleAlertClose={this.handleAlertClose} open={store.alertOpen} content={store.alertContent} />\r\n\r\n        </MuiThemeProvider>\r\n\r\n\r\n      );\r\n    }\r\n  }\r\n)\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}