{"version":3,"sources":["Utilities/RemovableTab.js","App.js","Alert.js","Header.js","Loader.js","AddEvent.js","MessageSending/SendMessage.js","MessageSending/StringMessage.js","MessageSending/NumberMessage.js","MessageSending/FileMessage.js","MessageSending/SendMessageForm.js","Message.js","Messages.js","Event.js","RegisteredEvents.js","global.js","serviceWorker.js","index.js","MessageSending/ObjectMessage.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_Tab__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_Tab__WEBPACK_IMPORTED_MODULE_2___default","_material_ui_icons_Clear__WEBPACK_IMPORTED_MODULE_3__","_material_ui_icons_Clear__WEBPACK_IMPORTED_MODULE_3___default","StyledTab","withStyles","root","textTransform","minHeight","Tab","StyledClearIcon","fontSize","position","top","right","ClearIcon","RemovableTab","props","a","createElement","Object","assign","onClick","e","click","label","icon","showIcon","stopPropagation","onClose","theme","createMuiTheme","palette","primary","blue","success","green","pending","grey","observer","_temp","_Component","App","_this","C_Users_nesber_Desktop_electron_chat_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","C_Users_nesber_Desktop_electron_chat_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","C_Users_nesber_Desktop_electron_chat_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","getActiveInstance","console","log","state","instances","filter","instance","id","activeInstance","addInstance","generateInstance","setState","concat","C_Users_nesber_Desktop_electron_chat_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","address","uuid","socket","configString","messages","registeredEvents","anonymousEvents","allEventsChecked","connectionStatus","createConfigObjectFromString","str","evalResult","eval","onHeaderValueChange","name","val","instanceId","_this$getInstanceSlic","getInstanceSlice","connect","_this$getInstanceSlic2","parsedConfig","disconnect","io","originalOnevent","onevent","on","_this$getInstanceSlic3","reason","createAlertAction","getInstanceBySocketId","disconnectManually","error","attemptNumber","_this$getInstanceSlic4","store","alertOpen","_this$getInstanceSlic5","repeatEventRegistration","keys","length","_arr","_i","event","registerEvent","listenToAllEvents","eventName","_this$getInstanceSlic6","registerEventToSocket","off","arg1","arg2","arg3","_len","arguments","args","Array","_key","lastArg","isFunction","index","indexOf","splice","addMessageToState","owner","status","messageId","_this$getInstanceSlic7","time","getTime","forEach","ins","that","C_Users_nesber_Desktop_electron_chat_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__","packet","data","eventData","registerAnonymousEvent","unregisterAnonymousEvents","_this$getInstanceSlic9","_this$getInstanceSlic10","hasOwnProperty","onMessagesDelete","_this$getInstanceSlic11","onConnectSubmit","config","onDisconnectSubmit","_this$getInstanceSlic12","onMessageSubmit","useCallback","callback","createAcknowledgementHandler","sendMessageToServer","onMessageFail","changeMessage","timeoutId","setTimeout","doesInstanceExist","callbackData","clearTimeout","emit","apply","onMessageResend","message","obj","_this$getInstanceSlic15","map","C_Users_nesber_Desktop_electron_chat_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","onEventSubmit","onEventDelete","_this$getInstanceSlic16","getSocketByInstanceId","socketId","handleAllEventsCheck","_this$getInstanceSlic17","checked","target","unix","getMoment","moment","format","functionToCheck","toString","handleAlertClose","handleAlertCloseAction","changeActiveInstance","createNewTab","destroyInstance","_this$getInstanceSlic18","newIndex","tabIndex","newInstances","lastInstance","getTabAddress","slice","instance0","C_Users_nesber_Desktop_electron_chat_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_7__","C_Users_nesber_Desktop_electron_chat_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","key","value","_this2","_this$getInstanceSlic19","activeInstanceId","firstInstance","react__WEBPACK_IMPORTED_MODULE_8___default","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_20__","_material_ui_core_AppBar__WEBPACK_IMPORTED_MODULE_19___default","color","_material_ui_core_Tabs__WEBPACK_IMPORTED_MODULE_17___default","indicatorColor","textColor","onChange","handleChange","_Utilities_RemovableTab__WEBPACK_IMPORTED_MODULE_21__","_material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_10___default","aria-label","_material_ui_icons_Add__WEBPACK_IMPORTED_MODULE_22___default","_Header__WEBPACK_IMPORTED_MODULE_29__","onAddressChange","onConfigStringChange","className","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_11___default","gutterBottom","variant","_MessageSending_SendMessage__WEBPACK_IMPORTED_MODULE_31__","connected","onSubmit","_material_ui_core_FormControlLabel__WEBPACK_IMPORTED_MODULE_13___default","control","_material_ui_core_Checkbox__WEBPACK_IMPORTED_MODULE_12___default","disabled","_AddEvent__WEBPACK_IMPORTED_MODULE_30__","_RegisteredEvents__WEBPACK_IMPORTED_MODULE_25__","events","values","style","float","_material_ui_core_Tooltip__WEBPACK_IMPORTED_MODULE_15___default","title","_material_ui_icons_DeleteSweep__WEBPACK_IMPORTED_MODULE_14___default","_Messages__WEBPACK_IMPORTED_MODULE_24__","clear","_Alert__WEBPACK_IMPORTED_MODULE_9__","nature","alertNature","open","content","alertContent","Component","variantIcon","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","MySnackbarContentWrapper","backgroundColor","dark","amber","iconVariant","opacity","marginRight","spacing","unit","display","alignItems","classes","other","C_Users_nesber_Desktop_electron_chat_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","Icon","react__WEBPACK_IMPORTED_MODULE_1___default","_material_ui_core_SnackbarContent__WEBPACK_IMPORTED_MODULE_11___default","classNames","aria-describedby","action","_material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_9___default","close","_material_ui_icons_Close__WEBPACK_IMPORTED_MODULE_2___default","margin","_material_ui_core_Snackbar__WEBPACK_IMPORTED_MODULE_10___default","anchorOrigin","vertical","horizontal","autoHideDuration","styles","flexGrow","search","C_Users_nesber_Desktop_electron_chat_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_5__","borderRadius","shape","fade","common","white","&:hover","marginLeft","width","breakpoints","up","searchIcon","height","pointerEvents","justifyContent","inputRoot","inputInput","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","inputInputQuery","paper","background","boxShadow","shadows","padding","outline","Header","configOpen","configError","preventDefault","isObject","returnParsed","undefined","alert","renderButton","react__WEBPACK_IMPORTED_MODULE_6___default","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_11___default","type","renderStatus","_Loader__WEBPACK_IMPORTED_MODULE_20__","_material_ui_icons_Search__WEBPACK_IMPORTED_MODULE_13___default","_material_ui_icons_CastConnected__WEBPACK_IMPORTED_MODULE_16___default","toggleConfig","handleModalClose","_this$props","autoComplete","_material_ui_core_AppBar__WEBPACK_IMPORTED_MODULE_8___default","_material_ui_core_Toolbar__WEBPACK_IMPORTED_MODULE_9___default","_material_ui_core_InputBase__WEBPACK_IMPORTED_MODULE_21___default","input","_material_ui_core_Tooltip__WEBPACK_IMPORTED_MODULE_10___default","_material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_12___default","_material_ui_icons_Settings__WEBPACK_IMPORTED_MODULE_15___default","_material_ui_core_Modal__WEBPACK_IMPORTED_MODULE_19___default","aria-labelledby","left","transform","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_18___default","_MessageSending_ObjectMessage__WEBPACK_IMPORTED_MODULE_14__","React","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_1___default","Loader","size","AddEvent","C_Users_nesber_Desktop_electron_chat_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_7___default","required","fullWidth","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_8___default","SendMessage","activeArg","isJson","JSON","parse","onMessageChange","arg","C_Users_nesber_Desktop_electron_chat_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","onEventChange","parseArg","parseInt","parsedArgs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","parsed","push","err","return","onArgChange","removeArg","addArgument","initialLength","onTypeChange","handleCheck","_material_ui_core_Tabs__WEBPACK_IMPORTED_MODULE_8___default","_Utilities_RemovableTab__WEBPACK_IMPORTED_MODULE_9__","_material_ui_core_Tooltip__WEBPACK_IMPORTED_MODULE_11___default","placement","enterDelay","_material_ui_icons_Add__WEBPACK_IMPORTED_MODULE_12___default","_SendMessageForm__WEBPACK_IMPORTED_MODULE_7__","onTimeoutChange","StringMessage","react_default","TextField_default","multiline","rows","NumberMessage","FileMessage","marginBottom","multiple","files","SendMessageForm","handleTypeChange","onAddArgument","FormControlLabel_default","Checkbox_default","Tooltip_default","index_es","Info_default","marginTop","FormControl_default","formControl","InputLabel_default","htmlFor","Select_default","inputProps","MenuItem_default","FormHelperText_default","MessageSending_StringMessage","MessageSending_NumberMessage","ObjectMessage","MessageSending_FileMessage","Button_default","minWidth","selectEmpty","Message","getType","IsJsonString","isArray","onDataCopy","el","document","stringify","setAttribute","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","getStatusColor","MessageCallbackData","Typography_default","lib","objectSpread","chromeLight","TREENODE_FONT_SIZE","TREENODE_FONT_FAMILY","renderSingleArgumentMessage","renderMultipleArgumentMessage","i","IconButton_default","FileCopy_default","nextProps","_this$props$message","Card_default","CardContent_default","bottom","textAlign","Refresh_default","Done_default","scrollToBottom","messagesDiv","scrollTop","scrollHeight","querySelector","messagesList","prevProps","shouldScrollDown","lastMessage","childNodes","clientHeight","offsetHeight","listStyle","src_Message","chip","Chip_default","Event_default","onDelete","__webpack_exports__","src_Event","d","mobx__WEBPACK_IMPORTED_MODULE_0__","observable","window","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_1___default"],"mappings":"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","file":"static/js/main.cf1a644d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\n\r\nconst StyledTab = withStyles({\r\n    root: {\r\n        textTransform: 'initial',\r\n        minHeight: '50px'\r\n    },\r\n})(Tab);\r\n\r\nconst StyledClearIcon = withStyles({\r\n    root: {\r\n        fontSize: '20px',\r\n        position: 'absolute',\r\n        top: '20px',\r\n        right: '0px'\r\n    },\r\n\r\n})(ClearIcon);\r\n\r\n\r\n\r\nconst RemovableTab = (props) => {\r\n\r\n    const onClose = (e)=>{\r\n        e.stopPropagation();\r\n        props.onClose()\r\n    }\r\n\r\n    const onClick = (e)=>{\r\n        // e.stopPropagation();\r\n        props.click && props.click();\r\n    }\r\n\r\n    return (\r\n        <StyledTab\r\n            // variant={props.color}\r\n            {...props}\r\n            // style={{ textTransform: 'initial' }}\r\n            onClick={onClick}\r\n            label={props.label}\r\n            icon={props.showIcon && <StyledClearIcon onClick={onClose }></StyledClearIcon> }\r\n        >\r\n\r\n        </StyledTab>\r\n    )\r\n}\r\n\r\nexport default RemovableTab;","import React, { Component } from 'react';\r\n// import Grid from '@material-ui/core/Grid';\r\nimport Alert from './Alert';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport DeleteSweepIcon from '@material-ui/icons/DeleteSweep';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { observer } from 'mobx-react';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n// import Fab from '@material-ui/core/Fab';\r\nimport RemovableTab from './Utilities/RemovableTab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n// import { runInAction } from 'mobx';\r\nimport Messages from './Messages';\r\nimport RegisteredEvents from './RegisteredEvents';\r\nimport uuid from 'uuid';\r\nimport './App.scss';\r\n// import Instance from './Instance';\r\nimport moment from 'moment';\r\nimport Header from './Header';\r\nimport AddEvent from './AddEvent'\r\nimport SendMessage from './MessageSending/SendMessage'\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport { blue, green, grey } from '@material-ui/core/colors';\r\nimport io from 'socket.io-client';\r\nimport store from './global';\r\nimport { handleAlertCloseAction, createAlertAction } from './global'\r\n// import { Button } from '@material-ui/core';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: blue,\r\n    success: green[600],\r\n    pending: grey\r\n  },\r\n});\r\n\r\nconst StyledTab = withStyles({\r\n  root: {\r\n    textTransform: 'initial',\r\n    minHeight: '50px'\r\n  },\r\n})(Tab);\r\n\r\nconst StyledClearIcon = withStyles({\r\n  root: {\r\n    fontSize: '20px',\r\n    position: 'absolute',\r\n    top: '20px',\r\n    right: '0px'\r\n  },\r\n\r\n})(ClearIcon);\r\n\r\n\r\n\r\nexport default observer(\r\n  class App extends Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      // this.messages = React.createRef();\r\n      const instance0 = this.generateInstance();\r\n      // const instance1 = this.generateInstance();\r\n      this.state = {\r\n        instances: [instance0],//Each instance has its own socket messages and events. Represented by a tab.\r\n        activeInstance: instance0.id//The instance represented by the active tab.\r\n      }\r\n    }\r\n\r\n\r\n    getActiveInstance = () => {\r\n      // debugger;\r\n      console.log(this.state)\r\n      return this.state.instances.filter(instance => instance.id === this.state.activeInstance)[0]\r\n    }\r\n\r\n\r\n\r\n    addInstance = () => {\r\n      const instance = this.generateInstance();\r\n      this.setState((state) => {\r\n        return {\r\n          instances: [...state.instances, instance],\r\n          activeInstance: instance.id\r\n        }\r\n      })\r\n    }\r\n\r\n    doesInstanceExist(instanceId) {//Used by async operations.\r\n      const instance = this.state.instances.filter(instance => instance.id === instanceId);\r\n      if (instance.length > 0) {\r\n        return true\r\n      }\r\n      return false;\r\n    }\r\n\r\n\r\n    generateInstance = () => {//Initial structure of an instance.\r\n      // var fakeMessages=[];\r\n      // for(let i=0;i<100;i++){\r\n      //   fakeMessages.push({\r\n      //     data:'yoyoyo',\r\n      //     eventName:'welcome',\r\n      //     id:uuid()\r\n      //   })\r\n      // }\r\n      const instance = {\r\n        address: \"http://localhost:3001/jpg\",\r\n        id: uuid(),\r\n        socket: null,\r\n        configString: \"\",\r\n        messages: [],\r\n        // messages: fakeMessages,\r\n        registeredEvents: {},\r\n        anonymousEvents: {},\r\n        allEventsChecked: false,\r\n        connectionStatus: \"disconnected\"\r\n      }\r\n\r\n      return instance;\r\n    }\r\n\r\n    createConfigObjectFromString = (str) => {\r\n      if (!str)\r\n        return;\r\n\r\n      let evalResult;\r\n      eval(`evalResult = ${str}`);\r\n      return evalResult\r\n\r\n    }\r\n\r\n    onHeaderValueChange = (name, val) => {\r\n\r\n      const instanceId = this.state.activeInstance;//The connect function is relevant to the currently active instance(tab).\r\n\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      instance[name] = val;\r\n\r\n      this.setState(() => ({ instances }));\r\n\r\n    }\r\n\r\n\r\n    connect = (address, configString) => {//Fired after a certain instance(tab) wants to create the initial connection\r\n      console.log('connecting');\r\n\r\n\r\n      const instanceId = this.state.activeInstance;//The connect function is relevant to the currently active instance(tab).\r\n\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      instance.connectionStatus = 'connecting';\r\n\r\n      const parsedConfig = this.createConfigObjectFromString(configString);\r\n\r\n      this.setState(() => ({ instances }));\r\n\r\n      if (instance.socket) {\r\n        instance.socket.disconnect();\r\n      }\r\n\r\n      var socket = instance.socket = parsedConfig ? io(address, parsedConfig) : io(address);\r\n\r\n\r\n      instance.originalOnevent = socket.onevent;//Create a reference to the original onevent function of SocketIO, to be used by the \"listen to all events\" mechanism.\r\n\r\n      socket.on('connect', () => {\r\n\r\n        const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n        console.log('connected!')\r\n\r\n        instance.connectionStatus = 'connected';\r\n        instance.address = address;\r\n\r\n        this.setState(() => ({ instances }));\r\n\r\n      });\r\n\r\n\r\n      socket.on('disconnect', (reason) => {\r\n        console.log('reason', reason)\r\n        if (reason === 'io server disconnect') {\r\n          createAlertAction('error', 'Disconnected from the server');\r\n\r\n          const instanceId = this.getInstanceBySocketId(socket.id).id;\r\n\r\n\r\n          this.disconnectManually(instanceId);\r\n\r\n        }\r\n        // else the socket will automatically try to reconnect\r\n      });\r\n\r\n\r\n      socket.on('connect_error', (error) => {\r\n        // console.log('Error connecting!', state)\r\n\r\n        createAlertAction('error', 'Error connecting to the server');\r\n\r\n      });\r\n\r\n\r\n      socket.on('reconnect', (attemptNumber) => {\r\n\r\n        const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n        instance.connectionStatus = \"connected\";\r\n        console.log('reconnected');\r\n\r\n        store.alertOpen = false;\r\n\r\n        this.setState(() => ({ instances }));\r\n\r\n      });\r\n\r\n\r\n      socket.on('reconnecting', (attemptNumber) => {\r\n        console.log('reconnecting');\r\n\r\n        const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n        instance.connectionStatus = \"reconnecting\";\r\n\r\n        this.setState(() => ({ instances }));\r\n\r\n      });\r\n\r\n      this.repeatEventRegistration(instance);//In case the user manually disconnected and reconnected, the events need to be re-registered.\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    repeatEventRegistration = (instance) => {\r\n      if (Object.keys(instance.registeredEvents).length > 0) {//PROBLEM!!!!!!!! fix it\r\n        console.log('re-registering events');\r\n        for (let event of Object.keys(instance.registeredEvents)) {\r\n          this.registerEvent(instance.id, event);\r\n        }\r\n      }\r\n\r\n      if (instance.allEventsChecked) {\r\n        this.listenToAllEvents(instance.id, true)\r\n      }\r\n    }\r\n\r\n\r\n    registerEvent = (instanceId, eventName) => {\r\n\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      const socket = instance.socket;//The socket associated with this instance.\r\n\r\n      if (socket) {\r\n        this.registerEventToSocket(instanceId,socket,eventName) \r\n      }\r\n\r\n      instance.registeredEvents[eventName] = { name: eventName };//\"instance\" is not to be confused with the one from the callback scope.\r\n\r\n      this.setState(() => ({ instances }));\r\n\r\n    }\r\n\r\n    registerEventToSocket = (instanceId,socket, eventName) => {\r\n      socket.off(eventName);\r\n\r\n      socket.on(eventName, (arg1,arg2,arg3) => {\r\n        console.log('on:', eventName,arg1,arg2,arg3)\r\n        // this.addMessageToState(instanceId, eventName, args, false)\r\n      })\r\n      socket.on(eventName, (...args) => {\r\n        console.log('on:', eventName, args)\r\n        const lastArg = args[args.length - 1];\r\n        const isFunction = this.isFunction(lastArg);\r\n\r\n        if (isFunction) {\r\n          lastArg();//If a callback was supplied from the server, it is invoked.\r\n          var index = args.indexOf(lastArg);\r\n          if (index > -1) {\r\n            args.splice(index, 1);\r\n          }\r\n\r\n        }\r\n\r\n        this.addMessageToState(instanceId, eventName, args, false)\r\n      })\r\n    }\r\n\r\n\r\n    addMessageToState = (instanceId, eventName, args, owner,status) => {\r\n\r\n      const messageId = uuid();\r\n\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      const time = this.getTime();\r\n      // debugger;\r\n      //*****UNDESRSTAND WHY THIS WASNT WORKING!!! */\r\n      // instance.messages.push({ id: messageId, eventName, time, data, owner, status: 'pending' })//Adding a message to the instance.\r\n      instance.messages = [...instance.messages, { id: messageId, eventName, time, args, owner, status }]\r\n\r\n      this.setState(() => ({ instances }));\r\n\r\n      return messageId;\r\n\r\n    }\r\n\r\n\r\n    getInstanceSlice = (id) => {//This function returns COPIES of both the entire instances array, and the specific instance object,\r\n      //to be used in setState by the calling function.\r\n\r\n      const instances = [...this.state.instances];//Copy the instances.\r\n\r\n      let instance;\r\n      instances.forEach((ins, index) => {\r\n        if (ins.id === id) {\r\n          instance = instances[index];//The actual instance\r\n        }\r\n      })\r\n      return { instance, instances };//Return an object containing both.\r\n    }\r\n\r\n\r\n\r\n\r\n    listenToAllEvents = (instanceId, on) => {//Will make an instance listen to every incoming socketIO message, prompting addition of the message to the\r\n      //instance.messages array.\r\n\r\n      const { instance } = this.getInstanceSlice(instanceId);\r\n\r\n      const socket = instance.socket;\r\n\r\n      const that = this;\r\n\r\n      if (on) {\r\n\r\n        socket.onevent = function (packet) {//This intercepts the original onevent function, which gets fired on every incoming event.\r\n          const eventName = packet.data[0];//Extracts the event name.\r\n\r\n          const eventData = packet.data[1];//Extracts the data.\r\n\r\n          that.registerAnonymousEvent(instanceId, eventName, eventData)//Registers the event\r\n\r\n          instance.originalOnevent.call(this, packet);//Calls the original onevent function, for normal application flow. The reference was created after\r\n          //socket initialization.\r\n\r\n        };\r\n\r\n      } else {\r\n        // debugger;\r\n        socket.onevent = instance.originalOnevent;\r\n\r\n        that.unregisterAnonymousEvents(instanceId)\r\n\r\n      }\r\n\r\n    }\r\n\r\n\r\n\r\n    registerAnonymousEvent = (instanceId, eventName) => {//This registers a callback for an event coming from SocketIO's Socket.prototype.onevent function.\r\n      console.log('registering anonymous event:', eventName)\r\n\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      instance.anonymousEvents[eventName] = { name: eventName };\r\n\r\n      const socket = instance.socket;\r\n\r\n      if (socket) {\r\n       \r\n        this.registerEventToSocket(instanceId,socket,eventName)\r\n\r\n      }\r\n\r\n      this.setState(() => ({ instances }));\r\n\r\n    }\r\n\r\n\r\n    unregisterAnonymousEvents = (instanceId) => {//Clear all anonymous events for the given instance.\r\n      // debugger;\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      const socket = instance.socket;\r\n\r\n      for (let event in instance.anonymousEvents) {\r\n        if (!instance.registeredEvents.hasOwnProperty(event)) {\r\n          socket.off(event)\r\n        }\r\n\r\n      }\r\n      instance.anonymousEvents = {}\r\n\r\n      this.setState(() => ({ instances }));\r\n    }\r\n\r\n\r\n\r\n    onMessagesDelete = () => {//Fired when the user deletes all messages of an instance\r\n\r\n      const instanceId = this.state.activeInstance;\r\n\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      instance.messages = [];\r\n\r\n      this.setState(() => ({ instances }));\r\n\r\n    }\r\n\r\n\r\n\r\n    onConnectSubmit = (address, config) => {\r\n      this.connect(address, config);\r\n    }\r\n\r\n\r\n\r\n    onDisconnectSubmit = () => {\r\n\r\n      const instanceId = this.state.activeInstance;\r\n\r\n      this.disconnectManually(instanceId);\r\n    }\r\n\r\n\r\n\r\n    disconnectManually = (instanceId) => {\r\n\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      const socket = instance.socket;\r\n\r\n      console.log('disconnected manually')\r\n\r\n      socket.disconnect();\r\n\r\n      instance.connectionStatus = 'disconnected';\r\n\r\n      this.setState(() => ({ instances }));\r\n    }\r\n\r\n\r\n    onMessageSubmit = (eventName, args,useCallback) => {\r\n      const instanceId = this.state.activeInstance;\r\n\r\n      const { instance } = this.getInstanceSlice(instanceId);\r\n\r\n      const socket = instance.socket;\r\n\r\n      const messageId = this.addMessageToState(instanceId, eventName, args, true,useCallback && 'pending' );\r\n\r\n      const callback = useCallback ?  this.createAcknowledgementHandler(instanceId, messageId) : null;\r\n\r\n      this.sendMessageToServer(socket, eventName, args, callback);\r\n    }\r\n\r\n\r\n\r\n\r\n    onMessageFail = (instanceId, messageId) => {//Fired when a message failed to receive a callback after a certain period of time.\r\n      this.changeMessage(instanceId, messageId, { status: 'fail' })\r\n    }\r\n\r\n\r\n\r\n\r\n    createAcknowledgementHandler = (instanceId, messageId) => {//Creates the logic to handle the message success/failure.\r\n      // debugger;\r\n      var timeoutId = setTimeout(() => {//Timeout function that waits for the message callback.\r\n\r\n        if (this.doesInstanceExist(instanceId)) {//This condition is to make sure, the instance still exists when the callback is fired.\r\n          this.onMessageFail(instanceId, messageId);\r\n        }\r\n\r\n      }, 5000);\r\n\r\n      return (callbackData) => {\r\n        // debugger;\r\n        clearTimeout(timeoutId);//Clear the timeout, so that an error is not fired.\r\n        // debugger;\r\n        console.log('response from callback', callbackData)\r\n        // debugger;\r\n\r\n\r\n        this.changeMessage(instanceId, messageId, { status: 'success',callbackData });\r\n\r\n\r\n      }\r\n\r\n      // this.sendMessageToServer(socket, eventName, args, callback);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    sendMessageToServer = (socket, eventName, args, callback) => {//Emits the event.\r\n      if(callback){\r\n         socket.emit(eventName, ...args, callback);//\"data\" can be multiple arguments.\r\n      }else{\r\n        socket.emit(eventName, ...args);//\"data\" can be multiple arguments.\r\n      }\r\n     \r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    onMessageResend = (instanceId, messageId) => {//Fired when the user tries to resend a failed message.\r\n      // debugger;\r\n\r\n      this.changeMessage(instanceId, messageId, { status: 'pending' });\r\n\r\n      const { instance } = this.getInstanceSlice(instanceId);\r\n\r\n      const message = instance.messages.filter(message => message.id === messageId)[0];\r\n\r\n      const eventName = message.eventName;\r\n\r\n      const socket = instance.socket;\r\n\r\n      const args = message.args;\r\n\r\n      const callback = this.createAcknowledgementHandler(instanceId, messageId);\r\n\r\n      this.sendMessageToServer(socket, eventName, args, callback);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    changeMessage = (instanceId, messageId, obj) => {//Function that changes properties of a message(particularly \"status\").\r\n\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      // const multipleProps = typeof prop === 'object' && Array.isArray(prop);\r\n\r\n      this.setState(() => {\r\n        const messages = instance.messages.map((message) => {\r\n          if (message.id === messageId) {\r\n\r\n            return {\r\n              ...message,\r\n              ...obj\r\n            }\r\n          } else {\r\n            return message;\r\n          }\r\n        })\r\n        instance.messages = messages;\r\n        return {\r\n          instances\r\n        }\r\n      })\r\n    }\r\n\r\n\r\n    onEventSubmit = (instance, eventName) => {//Fired when a user adds an event listener manually.\r\n      console.log(instance, eventName)\r\n      this.registerEvent(instance, eventName);\r\n    }\r\n\r\n\r\n\r\n    onEventDelete = (name) => {//Fired when a user deletes an event listener manually.\r\n\r\n      const instanceId = this.state.activeInstance;\r\n\r\n      const { instances, instance } = this.getInstanceSlice(instanceId);\r\n\r\n      const socket = instance.socket;\r\n\r\n      socket.off(name);\r\n\r\n      const oldEvents = instance.registeredEvents\r\n\r\n      delete oldEvents[name];\r\n\r\n      this.setState({\r\n        instances\r\n      })\r\n    }\r\n\r\n\r\n    getSocketByInstanceId = (instanceId) => {\r\n      const instance = this.state.instances.filter(instance => instance.id === instanceId)[0];\r\n      return instance.socket;\r\n    }\r\n\r\n    getInstanceBySocketId = (socketId) => {\r\n      const instance = this.state.instances.filter(instance => instance.socket.id === socketId)[0];\r\n      return instance;\r\n    }\r\n\r\n\r\n\r\n    handleAllEventsCheck = name => event => {//Fired when the user toggles the listen to all events checkbox on a particular instance.\r\n\r\n      const { instances, instance } = this.getInstanceSlice(this.state.activeInstance);\r\n\r\n      const checked = event.target.checked;\r\n\r\n      instance.allEventsChecked = checked;\r\n\r\n      this.setState(() => ({ instances }));\r\n\r\n      this.listenToAllEvents(instance.id, checked);\r\n    };\r\n\r\n\r\n\r\n    getTime = () => {\r\n\r\n      const unix = this.getMoment();\r\n      return moment(unix * 1000).format('HH:mm');\r\n    }\r\n\r\n\r\n\r\n    getMoment = () => {\r\n\r\n      return moment().unix();\r\n\r\n    }\r\n\r\n    isFunction = (functionToCheck) => {\r\n      return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\r\n    }\r\n\r\n\r\n\r\n    handleAlertClose = (event, reason) => {\r\n      handleAlertCloseAction(event, reason);\r\n    };\r\n\r\n\r\n    changeActiveInstance = (id) => {//Fired when user changes the tab.\r\n      // debugger;\r\n      this.setState(() => ({ activeInstance: id }))\r\n\r\n    }\r\n\r\n\r\n    createNewTab = () => {\r\n      const instance = this.generateInstance();//When user creates a new tab, an instance is created(with socket as null).\r\n      this.setState((state) => ({\r\n        instances: [...state.instances, instance]\r\n      }))\r\n\r\n      this.changeActiveInstance(instance.id);\r\n\r\n    }\r\n\r\n\r\n\r\n    destroyInstance = ( id) => {//Fired when a user destroys a tab.\r\n\r\n      // e.stopPropagation();\r\n      // debugger;\r\n      console.log('destroy instance!')\r\n\r\n      const { instances, instance } = this.getInstanceSlice(id);\r\n      console.log(instance.socket);\r\n\r\n      if (instance.socket) {//Disconnect the socket if exists.\r\n        instance.socket.disconnect();\r\n      }\r\n\r\n\r\n\r\n      const tabIndex = instances.indexOf(instance);\r\n\r\n      const tabLength = instances.length;\r\n\r\n      let newIndex;\r\n\r\n      if (tabLength - tabIndex === 1) {//Decide which tab will be active after update.\r\n        newIndex = tabIndex - 1\r\n      } else {\r\n        newIndex = tabIndex\r\n      }\r\n\r\n      const newInstances = instances.filter(instance => instance.id !== id);//New instances array, without the deleted one.\r\n\r\n      const lastInstance = newInstances[newIndex];\r\n\r\n      this.setState({\r\n        activeInstance: lastInstance.id,\r\n        instances: newInstances,\r\n\r\n      });\r\n\r\n    }\r\n\r\n\r\n\r\n    getTabAddress = (instance) => {//Get the address of the current tab. Needed for communication with the Header component, which also has its own independent \"address\" state.\r\n      const address = instance.address;\r\n      const connectionStatus = instance.connectionStatus;\r\n\r\n      // debugger;\r\n      if (connectionStatus === 'connected') {\r\n\r\n        if (address.length > 14) {\r\n          return address.slice(0, 14) + '...';\r\n        } else {\r\n          return address;\r\n        }\r\n\r\n      }\r\n\r\n      else if (connectionStatus === 'disconnected') {\r\n        return 'New connection'\r\n      }\r\n      else {\r\n        return connectionStatus + '...'\r\n      }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n      const { instance, instances } = this.getInstanceSlice(this.state.activeInstance)//Get the currently active instance.\r\n\r\n      const { connectionStatus, allEventsChecked, registeredEvents, messages, address, configString } = instance;//Extract the props.\r\n\r\n      console.log('length from app render', messages.length)\r\n      const activeInstanceId = instance.id;\r\n\r\n      const tabIndex = instances.indexOf(instance);\r\n\r\n      const firstInstance = instances[0]\r\n\r\n      console.log('tab index', tabIndex)\r\n\r\n      return (\r\n\r\n        <MuiThemeProvider theme={theme}>\r\n          <div id=\"wrapper\">\r\n            <AppBar color=\"default\" position=\"static\">\r\n              <Tabs indicatorColor=\"primary\" textColor=\"primary\" value={tabIndex} onChange={this.handleChange}>\r\n                {instances.map(instance =>\r\n                  <RemovableTab\r\n                    //  color=\"primary\"\r\n                     click={() => { this.changeActiveInstance(instance.id) }}   \r\n                     label={this.getTabAddress(instance)}\r\n                     onClose= {() => { this.destroyInstance( instance.id) }}\r\n                     showIcon={instance.id !== firstInstance.id}              \r\n                  />\r\n                  \r\n                   \r\n                  \r\n\r\n\r\n\r\n\r\n\r\n\r\n                )}\r\n\r\n                <IconButton onClick={this.createNewTab} aria-label=\"New tab\">\r\n                  <AddIcon />\r\n                </IconButton>\r\n\r\n              </Tabs>\r\n            </AppBar>\r\n\r\n            <Header\r\n              onAddressChange={(val) => { this.onHeaderValueChange('address', val) }}\r\n              onConfigStringChange={(val) => { this.onHeaderValueChange('configString', val) }}\r\n              key={activeInstanceId}\r\n              address={address}\r\n              configString={configString}\r\n              connectionStatus={connectionStatus}\r\n              onDisconnectSubmit={this.onDisconnectSubmit}\r\n              onConnectSubmit={() => { this.onConnectSubmit(address, configString) }}//\"address\" and \"configString\" are declared in the top of render.\r\n            >\r\n            </Header>\r\n\r\n\r\n\r\n\r\n\r\n            <div id=\"main\">\r\n              <div className=\"special_scroll\" id=\"panel\">\r\n\r\n                <div id=\"send_messages\">\r\n                  <Typography gutterBottom variant=\"h6\">Send messages</Typography>\r\n\r\n                  <SendMessage connected={connectionStatus === 'connected'} onSubmit={this.onMessageSubmit}></SendMessage>\r\n\r\n                </div>\r\n\r\n                <div id=\"events\">\r\n                  <Typography gutterBottom variant=\"h6\">Register events</Typography>\r\n\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        disabled={connectionStatus !== 'connected'}\r\n                        checked={allEventsChecked}\r\n                        onChange={this.handleAllEventsCheck('allEventsChecked')}\r\n                        value=\"allEventsChecked\"\r\n                        color=\"primary\"\r\n                      />\r\n                    }\r\n\r\n                    label=\"Listen to all incoming events\"\r\n                  />\r\n\r\n                  <AddEvent connected={connectionStatus === 'connected'} onSubmit={(eventName) => { this.onEventSubmit(activeInstanceId, eventName) }}></AddEvent>\r\n                  {Object.keys(registeredEvents).length > 0 && (\r\n\r\n                    <div id=\"registered_events\" >\r\n                      <RegisteredEvents onEventDelete={this.onEventDelete} events={Object.values(registeredEvents)}></RegisteredEvents>\r\n                    </div>\r\n\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"special_scroll\" id=\"messages\">\r\n\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Messages sent/received\r\n       {messages.length > 0 && (\r\n                    <div style={{ float: 'right' }}>\r\n\r\n                      <Tooltip title=\"Delete all messages\">\r\n                        <IconButton onClick={this.onMessagesDelete} aria-label=\"Delete\">\r\n                          <DeleteSweepIcon fontSize=\"small\" color=\"secondary\"></DeleteSweepIcon>\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                    </div>\r\n                  )}\r\n\r\n                </Typography>\r\n\r\n                <Messages\r\n                  onMessageResend={(messageId) => { this.onMessageResend(activeInstanceId, messageId) }}\r\n                  instanceId={activeInstanceId}\r\n                  messages={messages} />\r\n                <div style={{ float: \"left\", clear: \"both\" }} id=\"dummy\">\r\n\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n          <Alert nature={store.alertNature} handleAlertClose={this.handleAlertClose} open={store.alertOpen} content={store.alertContent} />\r\n\r\n        </MuiThemeProvider>\r\n\r\n\r\n      );\r\n    }\r\n  }\r\n)\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport classNames from 'classnames';\r\n// import Button from '@material-ui/core/Button';\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport green from '@material-ui/core/colors/green';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\n\r\nconst variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n};\r\n\r\nconst styles1 = theme => ({\r\n    success: {\r\n        backgroundColor: theme.palette.success,\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.dark,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing.unit,\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n});\r\n\r\nconst styles2 = theme => ({\r\n    margin: {\r\n        margin: theme.spacing.unit,\r\n    },\r\n});\r\n\r\nfunction MySnackbarContent(props) {\r\n    const { classes, className, message, onClose, variant, ...other } = props;\r\n    const Icon = variantIcon[variant];\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={classNames(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={classNames(classes.icon, classes.iconVariant)} />\r\n                    {message}\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton\r\n                    key=\"close\"\r\n                    aria-label=\"Close\"\r\n                    color=\"inherit\"\r\n                    className={classes.close}\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n            {...other}\r\n        />\r\n    );\r\n}\r\n\r\nconst MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);\r\n\r\n\r\n\r\nconst Alert = (props) => {\r\n\r\n    // const { classes } = this.props;\r\n    // console.log('alert rendering');\r\n\r\n    const handleAlertClose = (event,reason) => {\r\n        props.handleAlertClose(event,reason);\r\n    }\r\n\r\n    return (\r\n        <Snackbar\r\n            anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'left',\r\n            }}\r\n            open={props.open}\r\n            autoHideDuration={4000}\r\n            onClose={handleAlertClose}\r\n        >\r\n            <MySnackbarContentWrapper\r\n                onClose={handleAlertClose}\r\n                variant={props.nature || 'info'}\r\n                message={<span id=\"message-id\">{props.content}</span>}\r\n            />\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n\r\nexport default withStyles(styles2)(Alert);\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n// import TextField from '@material-ui/core/TextField';\r\nimport ObjectMessage from './MessageSending/ObjectMessage';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport CastConnectedIcon from '@material-ui/icons/CastConnected';\r\nimport { fade } from '@material-ui/core/styles/colorManipulator';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Modal from '@material-ui/core/Modal';\r\n\r\nimport Loader from './Loader'\r\n\r\n\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\n\r\nconst styles = theme => (\r\n    {\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n\r\n        search: {\r\n            position: 'relative',\r\n            borderRadius: theme.shape.borderRadius,\r\n            backgroundColor: fade(theme.palette.common.white, 0.15),\r\n            '&:hover': {\r\n                backgroundColor: fade(theme.palette.common.white, 0.25),\r\n            },\r\n            marginRight: theme.spacing.unit * 2,\r\n            marginLeft: 0,\r\n            width: '100%',\r\n            [theme.breakpoints.up('sm')]: {\r\n                marginLeft: theme.spacing.unit * 3,\r\n                width: 'auto',\r\n            },\r\n        },\r\n        searchIcon: {\r\n            width: theme.spacing.unit * 9,\r\n            height: '100%',\r\n            position: 'absolute',\r\n            pointerEvents: 'none',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n        },\r\n        inputRoot: {\r\n            color: 'inherit',\r\n            width: '100%',\r\n        },\r\n        inputInput: {\r\n\r\n\r\n            paddingTop: theme.spacing.unit,\r\n            paddingRight: theme.spacing.unit,\r\n            paddingBottom: theme.spacing.unit,\r\n            paddingLeft: theme.spacing.unit * 10,\r\n            transition: theme.transitions.create('width'),\r\n            width: '100%',\r\n            [theme.breakpoints.up('md')]: {\r\n                width: 200,\r\n            },\r\n        },\r\n        inputInputQuery: {\r\n\r\n\r\n            paddingTop: theme.spacing.unit,\r\n            paddingRight: theme.spacing.unit,\r\n            paddingBottom: theme.spacing.unit,\r\n            paddingLeft: theme.spacing.unit,\r\n            transition: theme.transitions.create('width'),\r\n            width: '100%',\r\n            [theme.breakpoints.up('md')]: {\r\n                width: 200,\r\n            },\r\n        },\r\n        paper: {\r\n            position: 'absolute',\r\n            width: theme.spacing.unit * 50,\r\n            backgroundColor: theme.palette.background.paper,\r\n            boxShadow: theme.shadows[5],\r\n            padding: theme.spacing.unit * 4,\r\n            outline: 'none',\r\n        }\r\n    }\r\n);\r\n\r\nclass Header extends React.Component {\r\n\r\n    state = {\r\n        address: \"localhost:3001\",\r\n        configOpen: false,\r\n        configString: \"\",\r\n        configError: false\r\n    }\r\n\r\n    onChange = (e) => {\r\n        // const name = e.target.name;\r\n        const value = e.target.value;\r\n        // this.setState({\r\n        //     [name]: value\r\n        // })\r\n        this.props.onAddressChange(value);\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        switch (this.props.connectionStatus) {\r\n            case 'connected':\r\n            case 'reconnecting':\r\n            case 'connecting':\r\n                this.onDisconnectSubmit();\r\n\r\n                break;\r\n            case 'disconnected':\r\n                this.onConnectSubmit();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    isObject = (value,returnParsed=false) => {//Returns the parsed object on success, false on failure.\r\n        // debugger;\r\n        let evalResult;\r\n        try {\r\n            eval(`evalResult = ${value}`) // if it doesn't throw it's a valid array or object\r\n            if (typeof evalResult === 'object') {\r\n                return returnParsed ? evalResult : true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    onConnectSubmit = (e) => {\r\n\r\n        // let config;\r\n        let value =this.props.configString; \r\n        if (value !== \"\") {\r\n            const isObject = this.isObject(value);\r\n            // console.log('options', config)\r\n            if (!isObject) {\r\n                return alert('Invalid configuration object!');\r\n            }\r\n            // value = parsedObject;\r\n        }\r\n\r\n        // e.preventDefault();\r\n        // alert(this.state.address)\r\n        this.props.onConnectSubmit(this.state.address, value ? value : null);\r\n    }\r\n\r\n    onDisconnectSubmit = (e) => {\r\n        // e.preventDefault();\r\n        // alert(this.state.address)\r\n        this.props.onDisconnectSubmit();\r\n    }\r\n\r\n    renderButton = () => {\r\n        switch (this.props.connectionStatus) {\r\n            case 'connected':\r\n                return <Button type=\"submit\" color=\"inherit\">Disconnect</Button>;\r\n            case 'reconnecting':\r\n            case 'connecting':\r\n                return <Button type=\"submit\" color=\"inherit\">Cancel</Button>;\r\n            case 'disconnected':\r\n                return <Button type=\"submit\" color=\"inherit\">Connect</Button>;\r\n            // case 'connecting':\r\n            //     return <Typography color=\"inherit\" variant=\"subtitle1\" >Connecting...</Typography>;\r\n            // default:\r\n\r\n        }\r\n\r\n    }\r\n\r\n    renderStatus = () => {\r\n        switch (this.props.connectionStatus) {\r\n\r\n            case 'reconnecting':\r\n            case 'connecting':\r\n                return <Loader></Loader>;\r\n            case 'disconnected':\r\n                return <SearchIcon></SearchIcon>;\r\n            case 'connected':\r\n                return <CastConnectedIcon></CastConnectedIcon>;\r\n            default:\r\n                return '';\r\n\r\n        }\r\n    }\r\n\r\n    toggleConfig = () => {\r\n        this.setState({ configOpen: !this.state.configOpen })\r\n    }\r\n\r\n    onConfigStringChange = (configString) => {\r\n        console.log(configString);\r\n        const isObject = this.isObject(configString);\r\n        this.setState({ configError:!isObject })\r\n        this.props.onConfigStringChange(configString);\r\n    }\r\n\r\n\r\n    handleModalClose = () => {\r\n        this.setState((state) => {\r\n            return { configOpen: !state.configOpen }\r\n        })\r\n    }\r\n\r\n   \r\n\r\n   \r\n\r\n    render() {\r\n\r\n        const { classes,address,configString, connectionStatus } = this.props;     \r\n\r\n        let disabled;  \r\n\r\n        if (connectionStatus === 'connected' || connectionStatus === 'connecting' || connectionStatus === 'reconnecting') {\r\n            disabled = true;\r\n        } else {\r\n            disabled = false;\r\n        }\r\n\r\n\r\n        return (\r\n            <form autoComplete=\"off\" onSubmit={this.onSubmit} className={classes.root}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n\r\n                        <div className={classes.search}>\r\n                            <div className={classes.searchIcon}>\r\n                                {this.renderStatus()}\r\n\r\n                            </div>\r\n                            <InputBase\r\n                                disabled={disabled}\r\n                                name=\"address\"\r\n                                value={address}\r\n                                onChange={this.onChange}\r\n                                // placeholder=\"localhost:3001\"\r\n                                classes={{\r\n                                    root: classes.inputRoot,\r\n                                    input: classes.inputInput,\r\n                                }}\r\n                            />\r\n\r\n                        </div>\r\n\r\n\r\n\r\n\r\n                        <Tooltip title=\"Add configuration\">\r\n\r\n                            <IconButton\r\n                            disabled={disabled}\r\n                                key=\"close\"\r\n                                aria-label=\"Close\"\r\n                                color=\"inherit\"\r\n                                // className={classes.close}\r\n                                onClick={this.handleModalClose}\r\n                            >\r\n                                <SettingsIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        <Modal\r\n                            // style={getModalStyle()}\r\n                            // className={classes.paper}\r\n                            aria-labelledby=\"simple-modal-title\"\r\n                            aria-describedby=\"simple-modal-description\"\r\n                            open={this.state.configOpen}\r\n                            onClose={this.handleModalClose}\r\n                        >\r\n                            <div style={{ top: '50%', left: '50%', transform: `translate(-${50}%, -${50}%)` }} className={classes.paper}>\r\n                                <Typography variant=\"h5\">Provide a configuration object to SocketIO. The string will be evaluated into a JS object</Typography>\r\n                                <ObjectMessage value={configString} error={this.state.configError} onChange={this.onConfigStringChange}></ObjectMessage>\r\n                                <Button onClick={this.handleModalClose} color=\"primary\">Confirm</Button>\r\n                            </div>\r\n\r\n                        </Modal>\r\n\r\n\r\n\r\n\r\n\r\n                        {this.renderButton()}\r\n\r\n                    </Toolbar>\r\n\r\n                </AppBar>\r\n\r\n            </form>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default withStyles(styles)(Header);","import React from 'react';\r\n// import { withStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\n\r\nfunction Loader(props) {\r\n//   const { classes } = props;\r\n  return (\r\n    <div>\r\n     \r\n      <CircularProgress size={21}  color=\"inherit\" />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Loader;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport default class AddEvent extends React.Component {\r\n    state = {\r\n        event: \"\"\r\n    }\r\n\r\n    onChange = (e) => {\r\n        const name = e.target.name;\r\n        const value = e.target.value;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        // alert(this.state.address)\r\n        this.props.onSubmit(this.state.event);\r\n    }\r\n\r\n    // render() {\r\n    //     return (\r\n    //         <form onSubmit={this.onSubmit} className=\"form-inline\">\r\n\r\n    //             <div className=\"form-group mx-sm-3 mb-2\">\r\n\r\n    //                 <input onChange={this.onChange} value={this.state.event} type=\"text\" className=\"form-control\" id=\"event\" name=\"event\" placeholder=\"Event name\" />\r\n    //             </div>\r\n    //             <button type=\"submit\" className=\"btn btn-primary mb-2\">Register event</button>\r\n    //         </form>\r\n\r\n    //     )\r\n    // }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} >\r\n                    \r\n                <TextField                  \r\n                    label=\"Event name\"\r\n                    required               \r\n                    onChange={this.onChange} value={this.state.event} \r\n                    type=\"text\"\r\n                    fullWidth\r\n                    name=\"event\"                \r\n                    margin=\"dense\"\r\n                    variant=\"outlined\"\r\n                />\r\n                <Button disabled={!this.props.connected} type=\"submit\" variant=\"contained\" color=\"primary\" >\r\n                    Register\r\n                </Button>\r\n            </form>\r\n\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport SendMessageForm from './SendMessageForm';\r\n// import uuid from 'uuid';\r\nimport Tabs from '@material-ui/core/Tabs';\r\n// import Button from '@material-ui/core/Button';\r\nimport RemovableTab from '../Utilities/RemovableTab';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nexport default class SendMessage extends React.Component {\r\n\r\n    state = {\r\n        eventName: \"yoyo\",\r\n        activeArg: 0,\r\n        // timeout:5000,\r\n        useCallback: false,\r\n        args: [\r\n            {\r\n                message: \"{}\",\r\n                type: 'File',\r\n                error: false\r\n            },\r\n            // {\r\n            //     message: \"second message\",\r\n            //     type: 'String',\r\n            //     error: false\r\n            // }\r\n        ]\r\n    }\r\n\r\n    isObject = (value) => {//Returns the parsed object on success, false on failure.\r\n        // debugger;\r\n        let evalResult;\r\n        try {\r\n            eval(`evalResult = ${value}`) // if it doesn't throw it's a valid array or object\r\n            if (typeof evalResult === 'object') {\r\n                return evalResult;\r\n            } else {\r\n                return false;\r\n            }\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    isJson = (str) => {//Returns the parsed object on success, false on failure.\r\n        // debugger;\r\n\r\n        try {\r\n            var obj = JSON.parse(str);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    // prepareFile = (fileObject)=>{\r\n\r\n    // }\r\n\r\n    onMessageChange = (arg, message) => {\r\n        // debugger;\r\n        const args = [...this.state.args];\r\n\r\n        const index = args.indexOf(arg);\r\n\r\n\r\n\r\n        let error = false;\r\n        if (arg.type === 'Object') {\r\n            const parsedMessage = this.isObject(message);\r\n            if (!parsedMessage) {\r\n                error = true;\r\n            }\r\n        }\r\n\r\n        // else if (arg.type === 'File') {\r\n        //     message = this.prepareFile(message);\r\n        // }\r\n\r\n        else if (arg.type === 'JSON') {\r\n            const parsedMessage = this.isJson(message);\r\n            if (!parsedMessage) {\r\n                error = true;\r\n            }\r\n        }\r\n        this.setState((state) => {\r\n            // const args = [...state.args];\r\n            // const index = args.indexOf(arg);\r\n            args[index].message = message;\r\n            args[index].error = error;\r\n            return { args }\r\n        })\r\n    }\r\n\r\n    onEventChange = (eventName) => {\r\n\r\n\r\n\r\n        this.setState({ eventName })\r\n    }\r\n\r\n\r\n\r\n    parseArg = (arg) => {\r\n\r\n        switch (arg.type) {\r\n            case 'Number':\r\n                return parseInt(arg.message)\r\n            // break;\r\n            case 'Object':\r\n                // debugger;\r\n                let evalResult;\r\n                eval(`evalResult = ${arg.message}`);\r\n                return evalResult;\r\n            default:\r\n                break;\r\n        }\r\n        return arg.message;\r\n\r\n    }\r\n\r\n    onSubmit = () => {\r\n        // debugger;\r\n        let parsedArgs = [];\r\n\r\n        const args = [...this.state.args];\r\n        for (let arg of args) {\r\n            const parsed = this.parseArg(arg);//Parse the message(with mutation, no new array).\r\n            parsedArgs.push(parsed);//Push the parsed property.\r\n        }\r\n\r\n        this.props.onSubmit(this.state.eventName, parsedArgs, this.state.useCallback);\r\n    }\r\n\r\n    \r\n    onArgChange = (e,value) => {\r\n        // debugger;\r\n        const arg = value;\r\n        this.setState({ activeArg: arg })\r\n    }\r\n\r\n    removeArg = (arg) => {\r\n        // debugger;\r\n        const args = [...this.state.args];\r\n        const index = args.indexOf(arg);\r\n\r\n        args.splice(index, 1);\r\n        this.setState(() => ({\r\n            args,\r\n            activeArg: args.length - 1\r\n        }))\r\n\r\n    }\r\n\r\n    addArgument = () => {\r\n\r\n        this.setState((state) => {\r\n            const args = [...state.args];\r\n            // debugger;\r\n            const initialLength = args.length;\r\n            args.push({\r\n                message: \"\",\r\n                type: 'String',\r\n                error: false\r\n            })\r\n\r\n            return {\r\n                args,\r\n                activeArg: initialLength\r\n            }\r\n        })\r\n    }\r\n\r\n    onTypeChange = (arg, type) => {\r\n        const args = [...this.state.args];\r\n\r\n        const index = args.indexOf(arg);\r\n        args[index].type = type\r\n        args[index].message = \"\"\r\n        args[index].error = false;\r\n        this.setState((state) => {\r\n            return {\r\n                args\r\n            }\r\n        })\r\n    }\r\n\r\n    // onTimeoutChange = (val)=>{\r\n    //     this.setState({timeout:val})\r\n    // }\r\n\r\n    handleCheck = (checked) => {\r\n        this.setState({ useCallback: checked });\r\n    }\r\n\r\n    render() {\r\n        const activeArg = this.state.args[this.state.activeArg]\r\n        const { message, error, type } = activeArg;\r\n        // debugger\r\n        return (\r\n            <div>\r\n                <Tabs\r\n                    value={this.state.activeArg}\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"primary\"\r\n                    onChange={this.onArgChange}\r\n                >\r\n                {this.state.args.map((arg, index) => {\r\n                    return  <RemovableTab onClose={() => { this.removeArg(arg) }} showIcon={this.state.args.length>1} key={index} name={index}  label={`Argument ${index+1}`}></RemovableTab>\r\n                })} \r\n                <Tooltip placement=\"right\"  enterDelay={350} title=\"Add an argument\">\r\n                  <IconButton onClick={this.addArgument} aria-label=\"New tab\">\r\n                <AddIcon />\r\n              </IconButton>\r\n                </Tooltip>\r\n              \r\n                </Tabs>\r\n\r\n               \r\n              \r\n                \r\n\r\n                <SendMessageForm\r\n                    message={message}\r\n                    type={type}\r\n                    useCallback={this.state.useCallback}\r\n                    error={error}\r\n                    // timeout={this.state.timeout}\r\n                    // onAddArgument={this.addArgument}\r\n                    onSubmit={() => { this.onSubmit(activeArg) }}\r\n                    onMessageChange={(message) => { this.onMessageChange(activeArg, message) }}\r\n                    onTypeChange={(type) => { this.onTypeChange(activeArg, type) }}\r\n                    onEventChange={this.onEventChange}\r\n                    onTimeoutChange={this.onTimeoutChange}\r\n                    handleCheck={this.handleCheck}\r\n                    eventName={this.state.eventName}\r\n                    connected={this.props.connected}></SendMessageForm>\r\n\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nconst StringMessage = (props) => {\r\n    \r\n    return (\r\n        <TextField\r\n            // id=\"outlined-password-input\"\r\n            label=\"Message\"\r\n          \r\n            \r\n            multiline\r\n            rows={10}\r\n            // className={classes.textField}\r\n            onChange={(e)=>{props.onChange(e.target.value)}} value={props.value}\r\n            type=\"text\"\r\n            fullWidth\r\n            name=\"message\"\r\n\r\n            // autoComplete=\"current-password\"\r\n            margin=\"dense\"\r\n            variant=\"outlined\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default StringMessage;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nconst NumberMessage = (props) => {\r\n\r\n    \r\n\r\n    return (\r\n        <TextField\r\n            // id=\"outlined-password-input\"\r\n            label=\"Message\"\r\n            required\r\n            // className={classes.textField}\r\n            onChange={(e)=>{props.onChange(e.target.value)}} value={props.value}\r\n            type=\"number\"\r\n            fullWidth\r\n            name=\"message\"\r\n            // autoComplete=\"current-password\"\r\n            margin=\"dense\"\r\n            variant=\"outlined\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default NumberMessage;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nconst FileMessage = (props) => {\r\n    // debugger;\r\n    const onFileChange  = (e)=>{\r\n        // debugger;\r\n        props.onChange(e.target.files[0]) \r\n    }\r\n\r\n    return (\r\n        <div style={{marginBottom:'10px'}}>\r\n            <input\r\n                // accept=\"image/*\"\r\n                // className={classes.input}\r\n                id=\"raised-button-file\"\r\n                multiple\r\n                type=\"file\"\r\n                // value=\"chuj\"\r\n                onChange={onFileChange}\r\n            />\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default FileMessage;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\nimport Select from '@material-ui/core/Select';\r\nimport StringMessage from './StringMessage';\r\nimport NumberMessage from './NumberMessage';\r\nimport FileMessage from './FileMessage';\r\nimport ObjectMessage from './ObjectMessage';\r\nimport { Typography } from '@material-ui/core';\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n    // root: {\r\n    //     display: 'flex',\r\n    //     flexWrap: 'wrap',\r\n    // },\r\n    formControl: {\r\n        margin: theme.spacing.unit,\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing.unit * 2,\r\n    },\r\n});\r\n\r\n\r\nclass SendMessageForm extends React.Component {\r\n    \r\n    onEventChange = (e) => {\r\n\r\n        const event = e.target.value;\r\n        // debugger;\r\n        // this.setState({ event })\r\n        this.props.onEventChange(event);\r\n    }\r\n\r\n    onMessageChange = (message) => {\r\n       \r\n        this.props.onMessageChange(message);\r\n    }\r\n\r\n\r\n    onSubmit = (e) => {\r\n        // debugger;\r\n        e.preventDefault();\r\n        \r\n        this.props.onSubmit();\r\n    }\r\n\r\n    handleTypeChange = (e) => {\r\n        // debugger;\r\n        this.props.onTypeChange(e.target.value)\r\n    }\r\n\r\n    handleCheck = name => event => {\r\n        this.props.handleCheck(event.target.checked);\r\n    };\r\n\r\n    // onTimeoutChange = (e)=>{\r\n    //     const val = e.target.value;\r\n    //     this.props.onTimeoutChange(val);\r\n    // }\r\n    addArgument = ()=>this.props.onAddArgument();\r\n\r\n\r\n    render() {\r\n\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <form className={classes.root} onSubmit={this.onSubmit} autoComplete=\"off\">\r\n                <div style={{display:'inline-flex',width:'100%'}}>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                checked={this.props.useCallback}\r\n                                onChange={this.handleCheck('checkedA')}\r\n                                value=\"checkedA\"\r\n                                color=\"primary\"\r\n                            />\r\n    \r\n                        }\r\n                        label=\"Wait for callback\"\r\n                    >\r\n    \r\n                    </FormControlLabel>\r\n                   {/*<TextField\r\n                    style={{maxWidth:'100px',height:'30px'}}\r\n                    // id=\"outlined-password-input\"\r\n                    label=\"Milliseconds\"\r\n                    required\r\n                    disabled={!this.props.useCallback}\r\n                    // className={classes.textField}\r\n                    onChange={this.onTimeoutChange} value={2000}\r\n                    type=\"number\"\r\n                    fullWidth\r\n                    name=\"message\"\r\n                    value={this.props.timeout}\r\n                    // autoComplete=\"current-password\"\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                   />*/}\r\n                <Tooltip enterDelay={350} placement=\"right\" title={<Typography style={{color:'white'}}>\r\n                Will send a callback function with every message, as the last parameter.\r\n                If this callback isn't invoked after 5 seconds, the message's status will change to 'fail', allowing you to resend it. \r\n                If the callback is called with some data, it will be presented in the message. Make sure your server is set to handle this.\r\n                </Typography>}>\r\n                   <InfoIcon style={{marginTop:'10px'}} color=\"default\"></InfoIcon>\r\n                </Tooltip>\r\n            \r\n                </div>\r\n                \r\n                <TextField\r\n                    // id=\"outlined-password-input\"\r\n                    label=\"Event name\"\r\n                    required\r\n                    // className={classes.textField}\r\n                    onChange={this.onEventChange} value={this.props.eventName}\r\n                    type=\"text\"\r\n                    fullWidth\r\n                    name=\"event\"\r\n\r\n                    // autoComplete=\"current-password\"\r\n                    margin=\"dense\"\r\n                    variant=\"outlined\"\r\n                />\r\n                <FormControl className={classes.formControl}>\r\n                    <InputLabel htmlFor=\"age-simple\">Format</InputLabel>\r\n                    <Select\r\n                        value={this.props.type}\r\n                        onChange={this.handleTypeChange}\r\n                        inputProps={{\r\n                            name: 'age',\r\n                            id: 'age-simple',\r\n                        }}\r\n                    >\r\n\r\n                        <MenuItem value={'String'}>String</MenuItem>\r\n                        <MenuItem value={'Number'}>Number</MenuItem>\r\n                        <MenuItem value={'Object'}>Object</MenuItem>\r\n                        <MenuItem value={'JSON'}>JSON</MenuItem>\r\n                        <MenuItem value={'File'}>File</MenuItem>\r\n\r\n                    </Select>\r\n                    <FormHelperText>Select message type</FormHelperText>\r\n                </FormControl>\r\n                {this.props.type === 'String' && <StringMessage onChange={this.onMessageChange} value={this.props.message} />}\r\n\r\n                {this.props.type === 'Number' && <NumberMessage onChange={this.onMessageChange} value={this.props.message} />}\r\n                {this.props.type === 'Object' && <ObjectMessage error={this.props.error} onChange={this.onMessageChange} value={this.props.message} />}\r\n                {this.props.type === 'JSON' && <ObjectMessage JSON error={this.props.error} onChange={this.onMessageChange} value={this.props.message} />}\r\n                {this.props.type === 'File' && <FileMessage error={this.props.error} onChange={this.onMessageChange} value={this.props.message} />}        \r\n\r\n                <Button disabled={!this.props.connected || this.props.error} type=\"submit\" variant=\"contained\" color=\"primary\" >\r\n                    Send\r\n              </Button>\r\n            </form>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(SendMessageForm);\r\n","import React from 'react';\r\n\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CopyIcon from '@material-ui/icons/FileCopy';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport { ObjectInspector } from 'react-inspector'\r\nimport { chromeLight } from 'react-inspector'\r\nimport { createAlertAction } from './global';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n// import { withStyles } from '@material-ui/core/styles';\r\n// import { Button } from '@material-ui/core';\r\n\r\n// const styles = theme => ({\r\n//     success: {\r\n//         color: theme.palette.success,\r\n//     },\r\n//     pending: {\r\n//         color: theme.palette.pending\r\n//     }\r\n// });\r\n\r\n\r\nclass Message extends React.Component {\r\n\r\n    getType = (message) => {\r\n        // debugger;\r\n        switch (typeof message) {\r\n            case 'string':\r\n                if (this.IsJsonString(message)) {\r\n                    return 'JSON';\r\n                }\r\n                return 'String'\r\n            case 'object':\r\n                if (Array.isArray(message)) {\r\n                    return 'Array';\r\n                }\r\n                else {\r\n                    return 'Object';\r\n                }\r\n            case 'number':\r\n                return 'Number';\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    IsJsonString = (str) => {\r\n        try {\r\n            JSON.parse(str);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    onDataCopy = (str) => {\r\n        const el = document.createElement('textarea');  // Create a <textarea> element\r\n        if (typeof str === 'object') {\r\n            try {\r\n                str = JSON.stringify(str);\r\n            } catch (error) {\r\n\r\n                return createAlertAction('error', 'Unable to copy');\r\n            }\r\n\r\n        }\r\n        el.value = str;                                 // Set its value to the string that you want copied\r\n        el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n        el.style.position = 'absolute';\r\n        el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n        document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n        const selected =\r\n            document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n                ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n                : false;                                    // Mark as false to know no selection existed before\r\n        el.select();                                    // Select the <textarea> content\r\n        document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n        document.body.removeChild(el);                  // Remove the <textarea> element\r\n        if (selected) {                                 // If a selection existed before copying\r\n            document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n            document.getSelection().addRange(selected);   // Restore the original selection\r\n        }\r\n\r\n        createAlertAction('success', 'Copied to clipboard!');\r\n\r\n    }\r\n\r\n    getStatusColor = (status) => {\r\n        switch (status) {\r\n            case 'pending':\r\n                return 'grey'\r\n\r\n            case 'success':\r\n                return 'green'\r\n            case 'fail':\r\n                return 'red'\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onMessageResend = (id) => {\r\n        this.props.onMessageResend(id);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {//To prevent unnecessary rendering, due to the new props.onMessageResend object.\r\n\r\n        if (this.props.message !== nextProps.message) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    MessageCallbackData = (data) => {\r\n        return (\r\n            <div >\r\n                <br />\r\n                <Typography>\r\n                    Data from callback:\r\n                         <ObjectInspector theme={{ ...chromeLight, ...({ TREENODE_FONT_SIZE: '18px', TREENODE_FONT_FAMILY: 'roboto,helvetica,arial' }) }} data={data} />\r\n                </Typography>\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    renderSingleArgumentMessage = (arg) => {\r\n        return <div>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n                Type: {this.getType(arg)}\r\n            </Typography>\r\n            <ObjectInspector theme={{ ...chromeLight, ...({ TREENODE_FONT_SIZE: '18px', TREENODE_FONT_FAMILY: 'roboto,helvetica,arial' }) }} data={arg} />\r\n\r\n        </div>\r\n    }\r\n\r\n    renderMultipleArgumentMessage = (args) => {\r\n        return args.map((arg, index) => {\r\n            const i = index + 1;\r\n            return <div>\r\n                <Typography>Argument {i}</Typography>\r\n                <Typography color=\"textSecondary\" gutterBottom>\r\n                    Type: {this.getType(arg)}\r\n                </Typography>\r\n                <ObjectInspector theme={{ ...chromeLight, ...({ TREENODE_FONT_SIZE: '18px', TREENODE_FONT_FAMILY: 'roboto,helvetica,arial' }) }} data={arg} />\r\n                <Tooltip title=\"Copy to clipboard\">\r\n                    <IconButton onClick={() => { this.onDataCopy(arg) }} ><CopyIcon fontSize=\"small\"></CopyIcon></IconButton>\r\n                </Tooltip>\r\n\r\n                {i !== args.length && <br />}\r\n            </div>\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // handleHover = () => {\r\n    //     this.setState({ CopyButtonShown: !this.state.CopyButtonShown })\r\n    // }\r\n\r\n\r\n    render() {\r\n        const { owner, args, id, time, status, eventName, callbackData } = this.props.message;\r\n        console.log('item rendering!', this.props)\r\n\r\n        return (\r\n\r\n\r\n\r\n            <Card >\r\n                <CardContent style={{ padding: '15px' }}>\r\n                    <Typography style={{ float: 'right' }} color=\"textSecondary\" gutterBottom>\r\n                        {time}\r\n                    </Typography>\r\n\r\n                    <Typography color=\"primary\" gutterBottom>\r\n                        {owner ? 'Sent' : 'Received'} event: {eventName}\r\n                    </Typography>\r\n                    {args.length === 1 ? this.renderSingleArgumentMessage(args[0]) : this.renderMultipleArgumentMessage(args)}\r\n\r\n\r\n                    <div style={{ float: 'right', position: 'relative', left: '6px', bottom: '49px' }} >\r\n                        {args.length === 1 && <Tooltip title=\"Copy to clipboard\">\r\n                            <IconButton onClick={() => { this.onDataCopy(args) }} ><CopyIcon fontSize=\"small\"></CopyIcon></IconButton>\r\n                        </Tooltip>}\r\n\r\n                        {status && owner && (\r\n\r\n                            <div style={{ textAlign: 'center' }}>\r\n                                {status === 'fail' ? (\r\n                                    <Tooltip title=\"Resend message\">\r\n                                        <IconButton style={{ padding: '2px' }} onClick={() => { this.onMessageResend(id) }} aria-label=\"Resend message\">\r\n                                            <RefreshIcon style={{ color: 'red' }} />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                ) : (\r\n                                        <DoneIcon style={{ color: this.getStatusColor(status) }}></DoneIcon>\r\n                                    )\r\n                                }\r\n\r\n                            </div>\r\n\r\n\r\n\r\n\r\n                        )}\r\n\r\n                    </div>\r\n                    {callbackData && this.MessageCallbackData(callbackData)}\r\n                </CardContent>\r\n\r\n\r\n\r\n            </Card>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n// export default withStyles(styles)(Message);\r\nexport default Message;\r\n\r\n\r\n// export default Message;\r\n\r\n","import React from 'react';\r\nimport Message from './Message';\r\n\r\n\r\n\r\nexport default class extends React.Component {\r\n\r\n\r\n    componentDidMount() {\r\n        this.messagesDiv = document.querySelector('#messages');//The scrolled container\r\n\r\n        this.messagesList = document.querySelector('#messages_list');//The actual UL. The ID is set in the messages component.\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        // debugger;\r\n\r\n        // console.log('prev props', prevProps)\r\n        // console.log('current props', this.props)\r\n\r\n        if(this.props.instanceId !== prevProps.instanceId)\r\n            return this.scrollToBottom();\r\n\r\n        if (this.props.messages.length > 0 && prevProps.messages.length !== this.props.messages.length) {\r\n            if (this.shouldScrollDown(this.props.messages[this.props.messages.length - 1])) {\r\n                this.scrollToBottom();\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    shouldScrollDown(lastMessage) {\r\n\r\n        if (lastMessage.owner) {\r\n            return true;\r\n        } else if (this.messagesList.childNodes.length > 1) {//Check if there is more than one item first.\r\n\r\n            const scrollHeight = this.messagesDiv.scrollHeight;\r\n\r\n            const clientHeight = this.messagesDiv.clientHeight;\r\n\r\n            const scrollTop = this.messagesDiv.scrollTop;\r\n\r\n            const lastItemHeight = this.messagesList.childNodes[this.messagesList.childNodes.length - 1].offsetHeight\r\n\r\n            const oneBeforeLastItemHeight = this.messagesList.childNodes[this.messagesList.childNodes.length - 2].offsetHeight\r\n\r\n            if (clientHeight + scrollTop + lastItemHeight + oneBeforeLastItemHeight >= scrollHeight) {\r\n                return true\r\n\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    scrollToBottom = () => {\r\n\r\n        this.messagesDiv.scrollTop = this.messagesDiv.scrollHeight;\r\n\r\n    }\r\n\r\n    // console.log(window.copy)\r\n    render() {\r\n        return (\r\n\r\n\r\n\r\n\r\n            <ul id=\"messages_list\" style={{ listStyle: 'none', paddingLeft: '0' }}>\r\n\r\n\r\n\r\n\r\n                {this.props.messages.map((message, index) => <li key={message.id} style={{ display: 'block', width: '100%', float: 'left', marginBottom: '15px', marginTop: '15px' }}><div\r\n                    style={{\r\n                        // display: 'inline-block',\r\n                        float: message.owner ? 'left' : 'right',\r\n                        width: '40%'\r\n\r\n                    }}>\r\n                    <Message onMessageResend={this.props.onMessageResend} message={message} >\r\n                    </Message>\r\n                </div>\r\n                </li>)}\r\n\r\n            </ul>\r\n\r\n\r\n\r\n        )\r\n    }\r\n\r\n\r\n}","import React from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport EventIcon from '@material-ui/icons/Event';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst styles = theme => ({\r\n   \r\n    chip: {\r\n    //   fontSize:'10px'\r\n    },\r\n  });\r\n\r\nconst Event = (props) => {\r\n    const { classes } = props;\r\n    // console.log('event rendering!')\r\n    return (\r\n        <Chip\r\n            label={props.name}\r\n          \r\n            className={classes.chip}\r\n            color=\"primary\"\r\n            icon={<EventIcon/>}\r\n            onDelete={props.onDelete}\r\n            variant=\"outlined\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default withStyles(styles)(Event);\r\n","import React from 'react';\r\nimport Event from './Event';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n\r\nconst styles={\r\n    marginBottom:'10px',\r\n    marginTop:'10px'\r\n}\r\n\r\nexport default (props) => {\r\n    console.log('events from props',props.events)\r\n    return(\r\n        <div >\r\n        <Typography variant=\"subtitle1\" gutterBottom>\r\n        Listening to events:\r\n      </Typography>\r\n            {props.events.map(event=><div style={styles}><Event onDelete={()=>{props.onEventDelete(event.name)}} name={event.name}></Event></div>)}\r\n        </div>\r\n     \r\n    )\r\n\r\n}","import {observable} from 'mobx';\r\n\r\n\r\n\r\nconst schema = {\r\n    alertOpen: false,\r\n    alertNature:'error',\r\n    alertContent: '',        \r\n}\r\n\r\nconst state = observable(schema);\r\n\r\nexport default window.state = state;\r\n\r\n\r\n\r\nexport const handleAlertCloseAction = (event, reason) => {\r\n  \r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    state.alertOpen=false;\r\n  }; \r\n\r\nexport const createAlertAction = (nature,message)=>{\r\n  Object.assign(state,{\r\n    alertOpen:true,\r\n    alertNature:nature,\r\n    alertContent:message\r\n  })\r\n}  \r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n// import 'codemirror/lib/codemirror.css';\r\n// import 'codemirror/theme/material.css';\r\n// import 'codemirror/mode/javascript/javascript'\r\n// import { Controlled as CodeMirror } from 'react-codemirror2'\r\n\r\nconst ObjectMessage = (props) => {\r\n\r\n    // return (\r\n    //     <div>\r\n    //         <CodeMirror\r\n    //             value={props.value}\r\n    //             options={{ mode: { name: 'javascript', json: true } }}\r\n    //             onBeforeChange={(editor, data, value) => {\r\n    //                 props.onChange(value)\r\n    //             }}\r\n                \r\n    //         />\r\n    //     </div>\r\n    // )\r\n\r\n\r\n    return (\r\n        <TextField\r\n            // id=\"outlined-password-input\"\r\n            label={props.JSON ? \"JSON message\" : \"Object message\"}\r\n            required\r\n            error={props.error}\r\n            multiline\r\n            rows={10}\r\n            // className={classes.textField}\r\n            onChange={(e)=>{props.onChange(e.target.value)}} value={props.value}\r\n            type=\"text\"\r\n            fullWidth\r\n            name=\"message\"\r\n\r\n            // autoComplete=\"current-password\"\r\n            margin=\"dense\"\r\n            variant=\"outlined\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default ObjectMessage;"],"sourceRoot":""}